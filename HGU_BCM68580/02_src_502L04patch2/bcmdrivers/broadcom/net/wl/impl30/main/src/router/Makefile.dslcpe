#
# Broadcom Linux Router Makefile
#
# Copyright (C) 2017, Broadcom Corporation. All Rights Reserved.
# 
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
# 
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
# SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
# OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
# CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
# $Id$
#

CONFIG_DSLCPE=1
BUILD_DIR=$(word 1, $(subst /bcmdrivers, /bcmdrivers,$(shell pwd)))
include $(BUILD_DIR)/make.common
INSTALLDIR=$(INSTALL_DIR)
BASEDIR=$(BUILD_DIR)/userspace/private/apps/wlan
CURDIR=$(BASEDIR)/components
include $(BASEDIR)/src/router/.config
# Router Source Base Directory
export SRCBASE_ROUTER := $(abspath $(BASEDIR)/src/router)
# Opensource bases
OPENSOURCE_BASE_DIR := $(CURDIR)/opensource
ifeq ($(ARCH),mips)
PLATFORM='mips-uclibc'
else
PLATFORM='arm-uclibc'
endif

# WBD Directories
export WBDSOURCE_DIR := $(BASEDIR)/components/apps/wbd

DNSMASQ_DIR := $(OPENSOURCE_BASE_DIR)/dnsmasq
LIBNFNETLINK_DIR := $(OPENSOURCE_BASE_DIR)/netfilter/libnfnetlink
LIBMNL_DIR := $(OPENSOURCE_BASE_DIR)/netfilter/libmnl
LIBNETFILTER_QUEUE_DIR := $(OPENSOURCE_BASE_DIR)/netfilter/libnetfilter_queue
LIBNETFILTER_CONNTRACK_DIR := $(OPENSOURCE_BASE_DIR)/netfilter/libnetfilter_conntrack
SALSA_DIR := $(OPENSOURCE_BASE_DIR)/salsa
ALSALIB_DIR := $(OPENSOURCE_BASE_DIR)/alsa-lib
RPCAPD_DIR := $(OPENSOURCE_BASE_DIR)/libpcap_winpcap
ALSAUTILS_DIR := $(OPENSOURCE_BASE_DIR)/alsa-utils
APLAY_DIR := $(ALSAUTILS_DIR)/aplay
AMIXER_DIR := $(ALSAUTILS_DIR)/amixer
ALSACTL_DIR := $(ALSAUTILS_DIR)/alsactl
MDNSRESPONDERDIR := $(OPENSOURCE_BASE_DIR)/mDNSResponder
LIBSQLITE3_DIR := $(OPENSOURCE_BASE_DIR)/sqlite3
LIBJSONC_DIR := $(OPENSOURCE_BASE_DIR)/jsonc
LIBXML2_DIR := $(OPENSOURCE_BASE_DIR)/libxml2

#Visualization Directories
ifneq (1,$(CONFIG_DSLCPE))
VISSOURCE_BASE_DIR := $(BASEDIR)/components/apps/visualization
else
VISSOURCE_BASE_DIR := $(CURDIR)/apps/visualization
endif

VISDCOLL_DIR := $(VISSOURCE_BASE_DIR)/datacollector
VISDCON_DIR := $(VISSOURCE_BASE_DIR)/dataconcentrator
#
# Cross-compile environment variables
#



ifeq ($(CONFIG_GDBSERVER),y)
export CFLAGS += -g
endif
export CFLAGS += -DLINUX_HYBRID_POSTPROCESSING_REMOVAL
#endif

ifeq ($(CONFIG_RTR_OPTIMIZE_SIZE),y)
export CFLAGS += -Os
export OPTCFLAGS = -Os
else
export CFLAGS += -O2
export OPTCFLAGS = -O2
endif

#look at driver configuration
WLCFGDIR=$(SRCBASE)/wl/config

ifeq ($(CONFIG_NVRAM),y)
export CFLAGS += -DBCMNVRAM
endif

ifeq ($(CONFIG_BCMWPA2),y)
export CFLAGS += -DBCMWPA2
endif

ifeq ($(CONFIG_DHDAP),y)
export CONFIG_DHDAP
export CFLAGS += -D__CONFIG_DHDAP__
endif

ifeq ($(CONFIG_GMAC3),y)
export CFLAGS += -D__CONFIG_GMAC3__
endif

ifeq ($(CONFIG_USBAP),y)
export CFLAGS += -D__CONFIG_USBAP__
endif

ifeq ($(CONFIG_BCMQOS),y)
export CFLAGS += -DBCMQOS
endif



ifeq ($(CONFIG_VISUALIZATION),y)

VISWWW = $(BASEDIR)/components/apps/visualization/www
JQUERYLIB = $(BASEDIR)/components/opensource/jquerylib
VISPAGES := $(wildcard $(VISWWW)/*.asp)
VISPAGES += $(wildcard $(VISWWW)/*.js)
VISPAGES += $(wildcard $(VISWWW)/*.css)
VISPAGES += $(wildcard $(VISWWW)/*.gif)
VISPAGES += $(wildcard $(VISWWW)/*.jpeg)
VISPAGES += $(wildcard $(VISWWW)/*.jpg)
VISPAGES += $(wildcard $(JQUERYLIB)/*.js)


www-install:
	@mkdir -p  $(INSTALLDIR)/webs/wlrouter
	-install -m 644 $(VISPAGES) $(INSTALLDIR)/webs/wlrouter

www-clean:
	@rm -rf $(INSTALLDIR)/webs/wlrouter

export CFLAGS += -D__CONFIG_VISUALIZATION__ -DCONFIG_VISUALIZATION_ENABLED
endif



ifeq ($(CONFIG_WPS),y)
export CFLAGS += -D__CONFIG_WPS__
# WFA WPS 2.0 Testbed extra caps
#export CFLAGS += -DWFA_WPS_20_TESTBED
endif

ifeq ($(CONFIG_NFC),y)
# WPS_NFC
export CFLAGS += -D__CONFIG_NFC__
endif

ifeq ($(CONFIG_EMF),y)
export CFLAGS += -D__CONFIG_EMF__
export CONFIG_EMF_ENABLED := $(CONFIG_EMF)
endif

ifeq ($(CONFIG_IGMP_PROXY),y)
export CFLAGS += -D__CONFIG_IGMP_PROXY__
endif

ifeq ($(CONFIG_WL_ACI),y)
export CFLAGS += -D__CONFIG_WL_ACI__
endif

ifeq ($(CONFIG_TRAFFIC_MGMT_RSSI_POLICY),y)
export CFLAGS += -DTRAFFIC_MGMT_RSSI_POLICY
endif

ifeq ($(CONFIG_SOUND),y)
export CFLAGS += -D__CONFIG_SOUND__
endif

ifeq ($(CONFIG_VOIP),y)
export CFLAGS += -DBCMVOIP
endif

ifeq ($(CONFIG_SQUASHFS), y)
ROOT_IMG := target.squashfs
else
ROOT_IMG := target.cramfs
endif

ifeq ($(CONFIG_WAPI),y)
export CFLAGS += -DBCMWAPI_WAI -DBCMWAPI_WPI
endif

ifeq ($(CONFIG_PHYMON_UTILITY),y)
export CFLAGS += -DPHYMON
endif

ifneq (2_4,$(LINUX_VERSION))
CRAMFSDIR := cramfs
else
CRAMFSDIR := $(LINUXDIR)/scripts/cramfs
endif

ifeq ($(CONFIG_BCMDCS),y)
export CFLAGS += -DBCM_DCS
endif

ifeq ($(CONFIG_EXTACS),y)
export CFLAGS += -DEXT_ACS
endif

ifeq ($(CONFIG_BCMBSD),y)
export CFLAGS += -DBCM_BSD
endif

ifeq ($(CONFIG_TOAD),y)
export CFLAGS += -D__CONFIG_TOAD__
endif

ifeq ($(CONFIG_MFP),y)
export CFLAGS += -DMFP
export MFP_TEST=1
endif

ifeq ($(CONFIG_HSPOT),y)
export CFLAGS += -DNAS_GTK_PER_STA -DHSPOT_OSEN
export ICONPATH := /webs/wlrouter/hspot
export CFLAGS += -DICONPATH=\"$(ICONPATH)\"
endif

ifeq ($(CONFIG_SIGMA),y)
export CFLAGS += -D__CONFIG_SIGMA__
endif

ifeq ($(CONFIG_MINI_ROUTER), y)
export CFLAGS += -D__CONFIG_ROUTER_MINI__
endif

ifeq ($(CONFIG_WNM), y)
export CFLAGS += -DWLWNM
endif

ifeq ($(CONFIG_FBT),y)
CFLAGS  += -DWLHOSTFBT
endif

ifeq ($(CONFIG_WBD),y)
export CFLAGS += -DBCM_WBD
ifeq ($(CONFIG_PLCWBD), y)
export PLC_WBD := 1
endif # PLC_WBD
endif # WBD

ifeq ($(CONFIG_BCM_APPEVENTD),y)
export CFLAGS += -DBCM_APPEVENTD
endif

export CC := $(CROSS_COMPILE)gcc
export AR := $(CROSS_COMPILE)ar
export AS := $(CROSS_COMPILE)as
export LD := $(CROSS_COMPILE)ld
export NM := $(CROSS_COMPILE)nm
export RANLIB := $(CROSS_COMPILE)ranlib
export STRIP := $(CROSS_COMPILE)strip
export SIZE := $(CROSS_COMPILE)size

ifneq ("$(LINUX_VERSION)","2_4")
export MKSYM := $(shell which $(TOP)/misc/mksym.pl)
endif
#lib_installs := libxml2-install libjsonc-install  libsqlite3-install
#obj-$(CONFIG_VISUALIZATION) += libsqlite3 libjsonc libxml2 visdcoll visdcon
lib_installs :=
ifeq ($(CONFIG_VISUALIZATION),y)
obj-$(CONFIG_VISUALIZATION) += visdcoll visdcon
endif

obj-y += libwifihttp.so 
ifeq ($(CONFIG_WBD), y)
obj-y += wbd
endif

obj-y += eapd 
eapd:
	$(MAKE) -C eapd/linux CROSS=$(CROSS_COMPILE) EXTRA_LDFLAGS=$(EXTRA_LDFLAGS) -f Makefile.dslcpe install
eapd-clean:
	+$(MAKE) -C eapd/linux CROSS=$(CROSS_COMPILE) EXTRA_LDFLAGS=$(EXTRA_LDFLAGS) -f Makefile.dslcpe clean

obj-y += nas 
nas:
	$(MAKE) -C nas/nas CROSS=$(CROSS_COMPILE) EXTRA_LDFLAGS=$(EXTRA_LDFLAGS) -f Makefile.dslcpe install
nas-clean:
	+$(MAKE) -C nas/nas CROSS=$(CROSS_COMPILE) EXTRA_LDFLAGS=$(EXTRA_LDFLAGS) -f Makefile.dslcpe clean

obj-y += wlconf 

wlconf:
	$(MAKE) -C wlconf  CROSS=$(CROSS_COMPILE) EXTRA_LDFLAGS=$(EXTRA_LDFLAGS) -f Makefile.dslcpe install
wlconf-clean:
	+$(MAKE) -C wlconf  CROSS=$(CROSS_COMPILE) EXTRA_LDFLAGS=$(EXTRA_LDFLAGS) -f Makefile.dslcpe clean

obj-$(CONFIG_RPCAPD) += rpcapd
ifeq ($(CONFIG_RPCAPD),y)
rpcapd:
	[ -f $(RPCAPD_DIR)/Makefile ] || \
	(cd $(RPCAPD_DIR); \
	chmod +x configure; \
	chmod +x runlex.sh; \
	 ./configure --with-pcap=linux \
	 --disable-big-core  --without-progs \
	 --without-cxx --with-normal \
	--host=$(ARCH)-uclibc-linux26 \
	CC=$(CROSS_COMPILE)gcc \
	ac_cv_linux_vers=2)
	$(MAKE) -C $(RPCAPD_DIR)
	$(MAKE) -C $(RPCAPD_DIR)/rpcapd CC=$(CROSS_COMPILE)gcc CFLAGS='-O2 -pthread -DHAVE_REMOTE -DHAVE_SNPRINTF -DHAVE_CONFIG_H'

rpcapd-install:
	install -d $(INSTALLDIR)/lib
	[ -f $(RPCAPD_DIR)/libpcap.a ] && \
	install -m 755 $(RPCAPD_DIR)/libpcap.a  $(INSTALLDIR)/lib
	install -d $(INSTALLDIR)/bin
	[ -f $(RPCAPD_DIR)/rpcapd/rpcapd ] && \
	install -m 755 $(RPCAPD_DIR)/rpcapd/rpcapd  $(INSTALLDIR)/bin

rpcapd-clean:
	$(MAKE) -C $(RPCAPD_DIR) clean
	$(MAKE) -C $(RPCAPD_DIR) distclean
	$(MAKE) -C $(RPCAPD_DIR)/rpcapd clean
endif



.PHONY: wbd wbd-clean wlconf wlconf-clean eapd eapd-clean nas nas-clean
wbd:
ifeq ($(CONFIG_WBD), y)
ifneq ($(wildcard $(WBDSOURCE_DIR)),)
	+$(MAKE) -C $(WBDSOURCE_DIR) CROSS=$(CROSS_COMPILE) EXTRA_LDFLAGS=$(EXTRA_LDFLAGS) -f Makefile.dslcpe install
endif
endif
wbd-clean:
ifeq ($(CONFIG_WBD), y)
ifneq ($(wildcard $(WBDSOURCE_DIR)),)
	+$(MAKE) -C $(WBDSOURCE_DIR) CROSS=$(CROSS_COMPILE) EXTRA_LDFLAGS=$(EXTRA_LDFLAGS) -f Makefile.dslcpe clean
endif
endif


all:$(obj-y)

#install:all libsqlite3-install libjsonc-install libxml2-install visdcoll-install visdcon-install www-install
ifeq ($(CONFIG_VISUALIZATION),y)
install:all visdcoll-install visdcon-install www-install
else
install:all
endif


libwifihttp.so:
	+$(MAKE) -C httpd -f Makefile.dslcpe install

clean_targets= wlconf-clean libwifihttp-clean eapd-clean nas-clean
ifeq ($(CONFIG_VISUALIZATION),y)
clean_targets += visdcoll-clean visdcon-clean www-clean 
endif

ifeq ($(CONFIG_WBD), y)
clean_targets +=  wbd-clean
endif

ifeq ($(CONFIG_RPCAPD),y)
clean_targets +=  rpcapd-clean
endif

clean: $(clean_targets)
	rm -rf $(BASEDIR)/src
	rm -rf $(BASEDIR)/components

libwifihttp-clean:
	+$(MAKE) -C httpd -f Makefile.dslcpe clean

libsqlite3:
ifeq ($(CONFIG_VISUALIZATION),y)
	if ( [ ! -f $(LIBSQLITE3_DIR)/.lastbuild_$(ARCH) ] ||  \
	     [ ! -f $(LIBSQLITE3_DIR)/installbin/lib/libsqlite3.so ]) && ( \
		[   -f  $(LIBSQLITE3_DIR)/Makefile.$(ARCH) ] || ( \
			cd $(LIBSQLITE3_DIR); \
			tar --strip-components=1 -xzf sqlite-autoconf-3080600.tar.gz; \
			CC=$(CC) ./configure \
				--target=$(PLATFORM)-linux \
	                     	--host=$(PLATFORM)-linux  \
			     	--prefix=$(LIBSQLITE3_DIR)/installbin; \
			cp -rf $(LIBSQLITE3_DIR)/Makefile $(LIBSQLITE3_DIR)/Makefile.$(ARCH))); then  \
		\
		cp -rf $(LIBSQLITE3_DIR)/Makefile.$(ARCH) $(LIBSQLITE3_DIR)/Makefile;\
		$(MAKE) -C $(LIBSQLITE3_DIR) ;  \
		$(MAKE) -C $(LIBSQLITE3_DIR) install-strip ; \
		rm -rf $(LIBSQLITE3_DIR)/.lastbuild_*;	\
		touch  $(LIBSQLITE3_DIR)/.lastbuild_$(ARCH); \
	fi
endif

libsqlite3-install: libsqlite3
ifeq ($(CONFIG_VISUALIZATION),y)
ifeq (1,$(CONFIG_DSLCPE))
	cp -rf $(LIBSQLITE3_DIR)/installbin/lib/* $(INSTALLDIR)/lib
	cp -rf $(LIBSQLITE3_DIR)/installbin/bin/* $(INSTALLDIR)/bin
	rm -rf $(INSTALLDIR)/libsqlite3*.la
else
endif
endif

libsqlite3-clean:
ifeq ($(CONFIG_VISUALIZATION),y)
	+$(MAKE) -i -C $(LIBSQLITE3_DIR) clean
endif

libjsonc:
ifeq ($(CONFIG_VISUALIZATION),y)
	if ( [ ! -f $(LIBJSONC_DIR)/.lastbuild_$(ARCH) ] || \
	     [ ! -f $(LIBJSONC_DIR)/installbin/lib/libjson-c.so ] ) && (\
		[   -f  $(LIBJSONC_DIR)/Makefile.$(ARCH) ] || ( \
			cd $(LIBJSONC_DIR); \
			tar --strip-components=1 -xzf json-c-0.11.tar.gz; \
			patch -p1<config.patch; \
			CC=$(CC) ./configure \
				--target=$(PLATFORM)-linux \
	                     	--host=$(PLATFORM)-linux  \
			     	--disable-oldname-compat  \
			     	--prefix=$(LIBJSONC_DIR)/installbin; \
			cp -rf $(LIBJSONC_DIR)/Makefile $(LIBJSONC_DIR)/Makefile.$(ARCH))); then  \
		\
		cp -rf $(LIBJSONC_DIR)/Makefile.$(ARCH) $(LIBJSONC_DIR)/Makefile;  \
		$(MAKE) -C $(LIBJSONC_DIR) ;  \
		$(MAKE) -C $(LIBJSONC_DIR) install-strip ; \
		rm -rf $(LIBJSONC_DIR)/.lastbuild_*;	\
		touch  $(LIBJSONC_DIR)/.lastbuild_$(ARCH); \
	fi
endif

libjsonc-install: libjsonc
ifeq ($(CONFIG_VISUALIZATION),y)
ifneq (1,$(CONFIG_DSLCPE))
	install -d $(INSTALLDIR)/libjsonc/usr/lib
	cp -rf $(LIBJSONC_DIR)/installbin/lib/* $(INSTALLDIR)/libjsonc/usr/lib
else
	cp -rf $(LIBJSONC_DIR)/installbin/lib/* $(INSTALLDIR)/lib
	rm -rf $(INSTALLDIR)/libjson*.la
endif
endif

libjsonc-clean:
ifeq ($(CONFIG_VISUALIZATION),y)
	+$(MAKE) -i -C $(LIBJSONC_DIR) clean
endif

libxml2:
ifeq ($(CONFIG_VISUALIZATION),y)
	if ( [ ! -f $(LIBXML2_DIR)/.lastbuild_$(ARCH) ] || \
	     [ ! -f $(LIBXML2_DIR)/installbin/lib/libxml2.so ] )  && ( \
		[   -f  $(LIBXML2_DIR)/Makefile.$(ARCH) ] || ( \
			cd $(LIBXML2_DIR); \
			tar --strip-components=1 -xzf  libxml2-sources-2.9.0.tar.gz; \
			CC=$(CC) ./configure \
				--target=$(PLATFORM)-linux \
	                     	--host=$(PLATFORM)-linux  \
			    	--with-python=no \
			    	--without-zlib \
			     	--prefix=$(LIBXML2_DIR)/installbin; \
			cp -rf $(LIBXML2_DIR)/Makefile $(LIBXML2_DIR)/Makefile.$(ARCH))); then  \
		\
		cp -rf $(LIBXML2_DIR)/Makefile.$(ARCH) $(LIBXML2_DIR)/Makefile;\
		$(MAKE) -C $(LIBXML2_DIR) ;  \
		$(MAKE) -C $(LIBXML2_DIR) install-strip ; \
		rm -rf $(LIBXML2_DIR)/.lastbuild_*;	\
		touch  $(LIBXML2_DIR)/.lastbuild_$(ARCH); \
	fi
endif

libxml2-install: libxml2
ifeq ($(CONFIG_VISUALIZATION),y)
ifneq (1,$(CONFIG_DSLCPE))
	install -d $(INSTALLDIR)/libxml2/usr/lib
	cp -rf $(LIBXML2_DIR)/installbin/lib/* $(INSTALLDIR)/libxml2/usr/lib
else
	cp -rf $(LIBXML2_DIR)/installbin/lib/* $(INSTALLDIR)/lib
	rm -rf $(INSTALLDIR)/libxml2*.la
endif
endif

libxml2-clean:
ifeq ($(CONFIG_VISUALIZATION),y)
	+$(MAKE) -i -C $(LIBXML2_DIR) clean
endif

visdcoll: $(lib_installs) 
ifeq ($(CONFIG_VISUALIZATION),y)
	[ -f $(VISDCOLL_DIR)/Makefile ] || \
        (cd $(VISDCOLL_DIR); \
	 tar xvfz conf.tar.gz; \
	 aclocal; \
         CC=$(CC) ./configure \
            --target=$(PLATFORM)-linux \
            --host=$(PLATFORM)-linux \
            --prefix=$(VISDCOLL_DIR)/installbin)
	+$(MAKE) -C $(VISDCOLL_DIR)
	+$(MAKE) -C $(VISDCOLL_DIR) install-strip
endif

visdcoll-install: visdcoll
ifeq ($(CONFIG_VISUALIZATION),y)
ifneq (1,$(CONFIG_DSLCPE))
	install -d $(INSTALLDIR)/visdcoll/usr/sbin
	cp -rf $(VISDCOLL_DIR)/installbin/bin/* $(INSTALLDIR)/visdcoll/usr/sbin
	install -d $(INSTALLDIR)/libz/usr/lib
	cp -f $(USRLIBDIR)/libz.so.1 $(INSTALLDIR)/libjsonc/usr/lib
else
	cp -rf $(VISDCOLL_DIR)/installbin/bin/* $(INSTALLDIR)/bin
	cp -rf $(VISDCOLL_DIR)/vis-datacollector $(VISDCOLL_DIR)/visdata
	cp -rf $(VISDCOLL_DIR)/vis-datacollector $(INSTALLDIR)/bin/visdata
endif

endif

visdcoll-clean:
ifeq ($(CONFIG_VISUALIZATION),y)
	+$(MAKE) -C $(VISDCOLL_DIR) uninstall distclean
endif
visdcon: $(lib_installs)
ifeq ($(CONFIG_VISUALIZATION),y)
	[ -f $(VISDCON_DIR)/Makefile ] || \
        (cd $(VISDCON_DIR); \
	 tar xvfz conf.tar.gz; \
	 aclocal; \
         CC=$(CC) ./configure \
            --target=$(PLATFORM)-linux \
            --host=$(PLATFORM)-linux \
            --prefix=$(VISDCON_DIR)/installbin)
	+$(MAKE) -C $(VISDCON_DIR)
	+$(MAKE) -C $(VISDCON_DIR) install
endif

visdcon-install: visdcon
ifeq ($(CONFIG_VISUALIZATION),y)
ifneq (1,$(CONFIG_DSLCPE))
	install -d $(INSTALLDIR)/visdcon/usr/sbin
	cp -rf $(VISDCON_DIR)/installbin/bin/* $(INSTALLDIR)/visdcon/usr/sbin
else
	cp -rf $(VISDCON_DIR)/installbin/bin/* $(INSTALLDIR)/bin
endif
endif

visdcon-clean:
ifeq ($(CONFIG_VISUALIZATION),y)
	+$(MAKE) -C $(VISDCON_DIR) uninstall distclean
endif

ifneq (1,$(CONFIG_DSLCPE))

ifeq ($(CONFIG_LIBNFNETLINK),y)
# iptables will try to link with netfilter's libs if enabled.
IPTABLES_DEPS := libnfnetlink
endif

ifeq ($(CONFIG_IPV6),y)
DOIPV6=1
else
DOIPV6=0
endif

ifeq (2_6_36,$(LINUX_VERSION))
iptables: $(IPTABLES_DEPS)
	+$(MAKE) -C iptables-1.4.12 BINDIR=/usr/sbin LIBDIR=/usr/lib \
	    KERNEL_DIR=$(LINUXDIR)

iptables-install:
ifeq ($(CONFIG_IPTABLES),y)
	install -d $(INSTALLDIR)/iptables/usr/lib/iptables
	install iptables-1.4.12/src/extensions/*.so $(INSTALLDIR)/iptables/usr/lib/iptables
	$(STRIP) $(INSTALLDIR)/iptables/usr/lib/iptables/*.so
	install -d $(INSTALLDIR)/iptables/usr/sbin
	cp -rf iptables-1.4.12/src/install/sbin/* $(INSTALLDIR)/iptables/usr/sbin
	install -d $(INSTALLDIR)/iptables/usr/lib
	cp -rf iptables-1.4.12/src/install/lib/* $(INSTALLDIR)/iptables/usr/lib
else
	# So that generic rule does not take precedence
	@true
endif
iptables-clean:
	-$(MAKE) -C iptables-1.4.12 KERNEL_DIR=$(LINUXDIR) clean

else ifeq (2_6,$(LINUX_VERSION))
iptables:
	+$(MAKE) -C iptables-1.x BINDIR=/usr/sbin LIBDIR=/usr/lib \
	    KERNEL_DIR=$(LINUXDIR) DO_IPV6=$(DOIPV6)

iptables-install:
ifeq ($(CONFIG_IPTABLES),y)
	install -d $(INSTALLDIR)/iptables/usr/lib/iptables
	install iptables-1.x/extensions/*.so $(INSTALLDIR)/iptables/usr/lib/iptables
	$(STRIP) $(INSTALLDIR)/iptables/usr/lib/iptables/*.so
	install -D iptables-1.x/iptables $(INSTALLDIR)/iptables/usr/sbin/iptables
	$(STRIP) $(INSTALLDIR)/iptables/usr/sbin/iptables
	install -D iptables-1.x/iptables-restore $(INSTALLDIR)/iptables/usr/sbin/iptables-restore # BCMQOS
	$(STRIP) $(INSTALLDIR)/iptables/usr/sbin/iptables-restore # BCMQOS
else
	# So that generic rule does not take precedence
	@true
endif
iptables-clean:
	-$(MAKE) -C iptables-1.x KERNEL_DIR=$(LINUXDIR) DO_IPV6=$(DOIPV6) clean
else # linux-2.6
iptables:
	+$(MAKE) -C iptables BINDIR=/usr/sbin LIBDIR=/usr/lib \
	    KERNEL_DIR=$(LINUXDIR)
#DO_IPV6=1

iptables-install:
ifeq ($(CONFIG_IPTABLES),y)
	install -d $(INSTALLDIR)/iptables/usr/lib/iptables
	install iptables/extensions/*.so $(INSTALLDIR)/iptables/usr/lib/iptables
	$(STRIP) $(INSTALLDIR)/iptables/usr/lib/iptables/*.so
	install -D iptables/iptables $(INSTALLDIR)/iptables/usr/sbin/iptables
	$(STRIP) $(INSTALLDIR)/iptables/usr/sbin/iptables
else
	# So that generic rule does not take precedence
	@true
endif
iptables-clean:
	-$(MAKE) -C iptables KERNEL_DIR=$(LINUXDIR) DO_IPV6=$(DOIPV6) clean

endif # linux-2.6

#if defined(NASSRC) || defined(PREBUILD)
nas: nvram shared
#endif

netconf: iptables
ifeq ($(CONFIG_NETCONF),y)
	+$(MAKE) LINUXDIR=$(LINUXDIR) -C netconf

else
	# In case of "Prerequisite 'iptables' is newer than target 'netconf'"
	@true
endif

ntpclient-install:
	install -D ntpclient/ntpclient $(INSTALLDIR)/ntpclient/usr/sbin/ntpclient
	$(STRIP) $(INSTALLDIR)/ntpclient/usr/sbin/ntpclient

ppp :
	+$(MAKE) -C ppp/pppoecd $* INSTALLDIR=$(INSTALLDIR)/ppp

ppp-install:
	+$(MAKE) -C ppp/pppoecd install INSTALLDIR=$(INSTALLDIR)/ppp

ppp-clean:
	+$(MAKE) -C ppp/pppoecd clean INSTALLDIR=$(INSTALLDIR)/ppp

udhcpd-install:
	install -D udhcpd/udhcpd $(INSTALLDIR)/udhcpd/usr/sbin/udhcpd
	$(STRIP) $(INSTALLDIR)/udhcpd/usr/sbin/udhcpd
	cd $(INSTALLDIR)/udhcpd/usr/sbin && ln -sf udhcpd udhcpc

wlconf: nvram shared

vlan:
	+$(MAKE) -C vlan CROSS=$(CROSS_COMPILE) STRIPTOOL=$(STRIP)

vlan-install:
	+$(MAKE) install -C vlan \
	    CROSS=$(CROSS_COMPILE) STRIPTOOL=$(STRIP) INSTALLDIR=$(INSTALLDIR)

vlan-clean:
	$(MAKE) -C vlan clean

#endif

buzzz:
	+$(MAKE) -C buzzz CROSS=$(CROSS_COMPILE) STRIPTOOL=$(STRIP)

buzzz-install:
	install -d $(TARGETDIR)
	+$(MAKE) -C buzzz CROSS=$(CROSS_COMPILE) STRIPTOOL=$(STRIP)  INSTALLDIR=$(INSTALLDIR) install

buzzz-clean:
	$(MAKE) -C buzzz clean

emf:
	+$(MAKE) -C emf/emfconf CROSS=$(CROSS_COMPILE)

emf-install:
ifeq ($(CONFIG_EMF),y)
	install -d $(TARGETDIR)
	+$(MAKE) install -C emf/emfconf \
	    CROSS=$(CROSS_COMPILE) INSTALLDIR=$(INSTALLDIR)

endif

emf-clean:
	$(MAKE) -C emf/emfconf clean

igs:
	+$(MAKE) -C emf/igsconf CROSS=$(CROSS_COMPILE)

igs-install:
ifeq ($(CONFIG_EMF),y)
	install -d $(TARGETDIR)
	+$(MAKE) -C emf/igsconf CROSS=$(CROSS_COMPILE) INSTALLDIR=$(INSTALLDIR) install

endif

igs-clean:
	$(MAKE) -C emf/igsconf clean

igmp:
	$(MAKE) -C igmp CROSS=$(CROSS_COMPILE)

igmp-install:
ifeq ($(CONFIG_IGMP_PROXY),y)
	install -d $(TARGETDIR)
	+$(MAKE) -C igmp CROSS=$(CROSS_COMPILE) INSTALLDIR=$(INSTALLDIR) install
endif

igmp-clean:
	$(MAKE) -C igmp clean

wps: nvram shared
ifneq (,$(and $(filter y,$(CONFIG_WPS)),$(wildcard wps/Makefile)))
	+$(MAKE) -C wps EXTRA_LDFLAGS=$(EXTRA_LDFLAGS)

else
	# Prevent to use generic rules"
	@true
endif

wps-install:
ifeq ($(CONFIG_WPS),y)
	+$(if $(wildcard wps/Makefile), \
	    $(MAKE) -C wps INSTALLDIR=$(INSTALLDIR) EXTRA_LDFLAGS=$(EXTRA_LDFLAGS) install \
	   , \
	    @true \
	  )
else
	# Prevent to use generic rules"
	@true
endif

wps-clean:
ifeq ($(CONFIG_WPS),y)
	[ ! -f wps/Makefile ] || $(MAKE) -C wps clean
else
	# Prevent to use generic rules"
	@true
endif

# NFC
nfc:
ifneq (,$(and $(filter y,$(CONFIG_NFC)),$(wildcard nfc/Makefile)))
	+$(MAKE) -C nfc EXTRA_LDFLAGS=$(EXTRA_LDFLAGS)
else
	# Prevent to use generic rules"
	@true
endif

nfc-install:
ifeq ($(CONFIG_NFC),y)
	+$(if $(wildcard nfc/Makefile), \
	    $(MAKE) -C nfc INSTALLDIR=$(INSTALLDIR) EXTRA_LDFLAGS=$(EXTRA_LDFLAGS) install \
	   , \
	    @true \
	  )
else
	# Prevent to use generic rules"
	@true
endif

nfc-clean:
ifeq ($(CONFIG_NFC),y)
	[ ! -f nfc/Makefile ] || $(MAKE) -C nfc clean
else
	# Prevent to use generic rules"
	@true
endif

#if defined(ROUTERSRC) || defined(PREBUILD)
ifneq (2_4,$(LINUX_VERSION))
udev:
	+$(MAKE) -C udev CROSS_COMPILE=$(CROSS_COMPILE)

udev-install:
	install -d $(TARGETDIR)
	+$(MAKE) install-udevtrigger -C udev \
	    CROSS_COMPILE=$(CROSS_COMPILE) DESTDIR=$(INSTALLDIR) prefix=/udev

udev-clean:
	$(MAKE) -C udev clean

hotplug2:
	+$(MAKE) -C hotplug2 CROSS_COMPILE=$(CROSS_COMPILE)

hotplug2-install:
	install -d $(TARGETDIR)
	install -d $(INSTALLDIR)/hotplug2
	+$(MAKE) install -C hotplug2 \
	    CROSS_COMPILE=$(CROSS_COMPILE) PREFIX=$(INSTALLDIR)

hotplug2-clean:
	$(MAKE) -C hotplug2 clean
endif
#endif



#ifdef BCMVISTAROUTER
IPROUTE2_SUBDIRS := lib

ifeq (2_4,$(LINUX_VERSION))
UCLIBC_IPV6=$(TOP)/lib/mipsel-uclibc/libc.so.0
ifeq ($(CONFIG_IPROUTE2),y)
IPROUTE2_SUBDIRS += ip
endif
endif

ifeq ($(CONFIG_BCMQOS),y)
IPROUTE2_SUBDIRS += tc
endif

radvd: flex dummy
	[ ! -d $@ ] || [ -f $@/Makefile ] || ( \
	    cd $@ && CC=$(CC) ./configure --host=$(PLT)-linux \
	)
	+$(if $(wildcard $@/), \
	    $(MAKE) -C radvd CC=${CC} radvd_LDADD="-L../flex -lfl" \
	   , \
	    @true \
	  )

radvd-install:
	[ ! -d radvd ] || install -D -m 755 radvd/radvd $(INSTALLDIR)/radvd/usr/sbin/radvd
	[ ! -d radvd ] || $(STRIP) $(INSTALLDIR)/radvd/usr/sbin/radvd

radvd-clean:
	[ ! -f radvd/Makefile ] || $(MAKE) -C radvd distclean

flex: dummy
	[ ! -d $@ ] || [ -f $@/Makefile ] || ( \
	    cd $@ && CC=$(CC) ./configure --host=$(PLT)-linux \
	)
	+$(if $(wildcard $@/),$(MAKE) libfl.a -C $@ CC=${CC} RANLIB=${RANLIB},@true)

iproute2:
ifneq ($(LINUX_VERSION),2_6_36)
	+$(if $(wildcard $@/), \
	    $(MAKE) -C $@ KERNEL_INCLUDE=$(LINUXDIR)/include CC=$(CC) \
	         AR=$(AR) SUBDIRS="$(IPROUTE2_SUBDIRS)" LDLIBS="$(UCLIBC_IPV6)" \
	   , \
	    @true \
	  )
else
	+$(if $(wildcard $(IPROUTE2_DIR)/), \
	    $(MAKE) -C $(IPROUTE2_DIR) KERNEL_INCLUDE=$(LINUXDIR)/include CC=$(CC) \
	         AR=$(AR) SUBDIRS="$(IPROUTE2_SUBDIRS)" LDLIBS="$(UCLIBC_IPV6)" \
	   , \
	    @true \
	  )

endif

iproute2-clean:
	[ ! -d $(IPROUTE2_DIR) ] || $(MAKE) -C $(IPROUTE2_DIR) clean

iproute2-install:
ifeq ($(CONFIG_BCMQOS),y)
	[ ! -d $(IPROUTE2_DIR) ] || install -D -m 755 $(IPROUTE2_DIR)/tc/tc $(INSTALLDIR)/iproute2/usr/sbin/tc
	[ ! -d $(IPROUTE2_DIR) ] || $(STRIP) $(INSTALLDIR)/iproute2/usr/sbin/tc
endif
ifeq ($(CONFIG_IPROUTE2),y)
	[ ! -d $(IPROUTE2_DIR) ] || install -D -m 755 $(IPROUTE2_DIR)/ip/ip $(INSTALLDIR)/iproute2/usr/sbin/ip
	[ ! -d $(IPROUTE2_DIR) ] || $(STRIP) $(INSTALLDIR)/iproute2/usr/sbin/ip
endif

iputils:
ifneq ($(LINUX_VERSION),2_6_36)
	[ ! -d $@ ] || [ -f $@/include-glibc/bits/socket.h ] || ( \
	    cd $@/include-glibc/bits && ln -s ../socketbits.h socket.h \
	)
endif
	+$(if $(wildcard $(IPUTILS_DIR)), \
	    $(MAKE) -C $(IPUTILS_DIR) KERNEL_INCLUDE=$(LINUXDIR)/include \
	    LINUX_VERSION=$(LINUX_VERSION) CC=$(CC) LDLIBS= \
	   , \
	    @true \
	  )

iputils-clean:
	[ ! -d $(IPUTILS_DIR) ] || $(MAKE) -C $(IPUTILS_DIR) clean

iputils-install:
	[ ! -d $(IPUTILS_DIR) ] || install -D -m 755 $(IPUTILS_DIR)/ping6 $(INSTALLDIR)/iputils/usr/sbin/ping6
	[ ! -d $(IPUTILS_DIR) ] || $(STRIP) $(INSTALLDIR)/iputils/usr/sbin/ping6
	[ ! -d $(IPUTILS_DIR) ] || install -D -m 755 $(IPUTILS_DIR)/traceroute6 $(INSTALLDIR)/iputils/usr/sbin/traceroute6
	[ ! -d $(IPUTILS_DIR) ] || $(STRIP) $(INSTALLDIR)/iputils/usr/sbin/traceroute6
	[ ! -d $(IPUTILS_DIR) ] || install -D -m 755 $(IPUTILS_DIR)/tracepath6 $(INSTALLDIR)/iputils/usr/sbin/tracepath6
	[ ! -d $(IPUTILS_DIR) ] || $(STRIP) $(INSTALLDIR)/iputils/usr/sbin/tracepath6

dhcp6: dummy
#dhcp6s dhcp6c: dummy
	[ ! -d dhcp6 ] || [ -f dhcp6/Makefile ] || ( \
	    cd dhcp6 && ./configure CC=gcc CFLAGS+="-I../shared" \
	)
ifeq ($(CONFIG_UCLIBC),y)
	+$(if $(wildcard dhcp6/), \
	    $(MAKE) dhcp6s dhcp6c -C dhcp6 CC=$(CC) LIBS="$(UCLIBC_IPV6)" \
	   , \
	    @true \
	  )
else
	+$(if $(wildcard dhcp6/), \
	    $(MAKE) dhcp6s dhcp6c -C dhcp6 CC=$(CC) \
	        LIBS="-lresolv -L../libbcmcrypto -lbcmcrypto \
	              -L$(INSTALLDIR)/libbcmcrypto/usr/lib" \
	   , \
	    @true \
	  )
endif

dhcp6-install: $(if $(filter y,${CONFIG_DHCPV6S}),dhcp6s-install) \
               $(if $(filter y,${CONFIG_DHCPV6C}),dhcp6c-install)
	@true # Keep this rule from falling through to generic and failing.

dhcp6s-install: dhcp6
	[ ! -d dhcp6 ] || install -D -m 755 dhcp6/dhcp6s $(INSTALLDIR)/dhcp6s/usr/sbin/dhcp6s
	[ ! -d dhcp6 ] || $(STRIP) $(INSTALLDIR)/dhcp6s/usr/sbin/dhcp6s

dhcp6c-install: dhcp6
	[ ! -d dhcp6 ] || install -D -m 755 dhcp6/dhcp6c $(INSTALLDIR)/dhcp6c/usr/sbin/dhcp6c
	[ ! -d dhcp6 ] || $(STRIP) $(INSTALLDIR)/dhcp6c/usr/sbin/dhcp6c

dhcp6s-clean dhcp6c-clean:
#dhcp6s-clean dhcp6c-clean:
dhcp6-clean:
#endif

.PHONY: wlexe 
wlexe:
ifeq ($(CONFIG_WLEXE),y)
ifneq ($(wildcard $(SRCBASE_SYS)/wl/exe/GNUmakefile),)
ifeq ($(ARCH),arm)
	$(MAKE) TARGETARCH=arm_le ARCH_SFX="" TARGET_PREFIX=$(CROSS_COMPILE) -C $(SRCBASE_SYS)/wl/exe
else
	$(MAKE) TARGETARCH=mips ARCH_SFX="" TARGET_PREFIX=$(CROSS_COMPILE) -C $(SRCBASE_SYS)/wl/exe
endif
	[ -d wlexe ] || install -d wlexe
	install $(SRCBASE_SYS)/wl/exe/wl wlexe
ifeq ($(ARCH),arm)
	install $(SRCBASE_SYS)/wl/exe/socket_noasd/arm_le/wl_server_socket wlexe
else
	install $(SRCBASE_SYS)/wl/exe/socket_noasd/mips/wl_server_socket wlexe
endif
endif
endif

.PHONY: wlexe-clean
wlexe-clean:
ifneq ($(wildcard $(SRCBASE_SYS)/wl/exe/GNUmakefile),)
	$(MAKE) TARGET_PREFIX=$(CROSS_COMPILE) -C $(SRCBASE_SYS)/wl/exe clean
	$(RM) wlexe/wl
	$(RM) wlexe/wl_server_socket
endif

.PHONY: wlexe-install
wlexe-install:
ifeq ($(CONFIG_WLEXE),y)
ifneq ($(wildcard $(SRCBASE_SYS)/wl/exe/GNUmakefile),)
	[ ! -d wlexe ] || install -D -m 755 wlexe/wl $(INSTALLDIR)/wlexe/usr/sbin/wl
	[ ! -d wlexe ] || install -D -m 755 wlexe/wl_server_socket $(INSTALLDIR)/wlexe/usr/sbin/wl_server_socket
	[ ! -d wlexe ] || $(STRIP) $(INSTALLDIR)/wlexe/usr/sbin/wl
	[ ! -d wlexe ] || $(STRIP) $(INSTALLDIR)/wlexe/usr/sbin/wl_server_socket
endif
endif

#
# Generic rules
#

%:
	+$(if $(wildcard $*/),$(MAKE) -C $* EXTRA_LDFLAGS=$(EXTRA_LDFLAGS) ARCH=$(ARCH),@true)

%-clean:
	[ ! -d $* ] || $(MAKE) -C $* clean

%-install:
	+$(if $(wildcard $*/), \
	  $(MAKE) -C $* install INSTALLDIR=$(INSTALLDIR)/$*, \
	  @true \
	 )

$(obj-y) $(obj-n) $(obj-clean) $(obj-install): dummy

.PHONY: all clean distclean mrproper install package check_kernel_config libwifihttp.so 
.PHONY: conf mconf oldconf kconf kmconf config menuconfig oldconfig
.PHONY: dummy netconf
.PHONY: libstdcpp libstdcpp-install
.PHONY: libmnl libmnl-install libmnl-clean
.PHONY: libnfnetlink libnfnetlink-install libnfnetlink-clean
.PHONY: libnetfilter_conntrack libnetfilter_conntrack-install libnetfilter_conntrack-clean
.PHONY: libnetfilter_queue libnetfilter_queue-install libnetfilter_queue-clean
.PHONY: libflow libflow-install libflow-clean

endif

ifeq ($(CONFIG_VISUALIZATION),y)
.PHONY: libsqlite3 libsqlite3-install libsqlite3-clean
.PHONY: libjsonc libjsonc-install libjsonc-clean
.PHONY: libxml2 libxml2-install libxml2-clean
.PHONY: visdcoll visdcoll-install visdcoll-clean 
.PHONY: visdcon visdcon-install visdcon-clean
endif
