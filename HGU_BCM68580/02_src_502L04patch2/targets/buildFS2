#!/bin/bash

# This script runs under fakeroot.  The fakeroot utility has 
# problems under 64-bit/multi-processor/preemptive kernel, so
# we run it only when necessary. 
# NOTE: If this build is being run on a 64-bit machine, make
# sure to NOT invoke any 32-bit applications in this script.
# Instead move all 32-bit application accesses to buildFS

trap 'echo Error: command exited with code ["$?"]; exit 1' ERR

if [ `whoami` != "root" ]; then
   echo "buildFS2 ERROR! Fakeroot not working!"
   exit 2
fi

source $KERNEL_DIR/.config

# Create devices
# (Swited from device table to fakeroot for device nodes - always use makeDevs)
./makeDevs

# make root file system images for squashfs, jffs2 and ubifs

	#### SQUASHFS 
if [ "$BRCM_KERNEL_AUXFS_JFFS2" == "y" ] ; then
    chmod u+w $TARGET_FS/etc/fstab
    echo -e "mtd:data\t/data\tjffs2\t,\t\t0\t0\n" >> $TARGET_FS/etc/fstab
    chmod a-w $TARGET_FS/etc/fstab
fi

function mksquashfs_img()
{
sqshimg_name="$1"
if [ "$BRCM_IKOS" = "y" ]; then
    $HOSTTOOLS_DIR/mksquashfs $TARGET_FS $PROFILE_DIR/$sqshimg_name -noappend
else
    (ulimit -t 900 ; $HOSTTOOLS_DIR/mksquashfs $TARGET_FS $PROFILE_DIR/$sqshimg_name -noappend -comp xz) 
    if [ $? -ne 0 ]; then
        echo "mksquashfs failed once"
        (ulimit -t 900 ; $HOSTTOOLS_DIR/mksquashfs $TARGET_FS $PROFILE_DIR/$sqshimg_name -noappend -comp xz) 
        if [ $? -ne 0 ]; then
            echo "mksquashfs failed twice"
            exit 2
        fi
    fi
fi
}
mksquashfs_img rootfs.img

ASTRA_DIR=$BUILD_DIR/secureos/astra/user

if [ "$BRCM_KERNEL_ROOTFS" = "all" ]; then
        if [ ! -e "$PROFILE_DIR/vmlinux.bin" ]; then
             echo "error: $PROFILE_DIR/vmlinux.bin not found! Check buildFS output"
             exit 2
        fi 
        if [ ! -e "$PROFILE_DIR/vmlinux" ]; then
             echo "error: $PROFILE_DIR/vmlinux not found! Check buildFS output"
             exit 2
        fi 

        SUMTOOL=`find $HOSTTOOLS_DIR/mtd-utils*/ -name 'sumtool' -print -quit`

#### JFFS2 RootFS
        echo -e "/cferam.000" > $HOSTTOOLS_DIR/nocomprlist
        if [ -f $BUILD_DIR/shared/opensource/pmc/images/$BRCM_CHIP.bin ]; then
            echo -e "/pmc.bin" >> $HOSTTOOLS_DIR/nocomprlist
        fi
        [ ! -z ${BRCM_DTB} ] && echo -e "/${BRCM_DTB}" >> $HOSTTOOLS_DIR/nocomprlist

        if [ "$CONFIG_BCM_ASTRA" = "y" ] ; then
            echo /astra.lz >> $HOSTTOOLS_DIR/nocomprlist
            echo /astra.dtb >> $HOSTTOOLS_DIR/nocomprlist
        fi

        if [ "$BUILD_NAND_KERNEL_LZMA" = "y" ]; then
            echo "Compressing kernel using LZMA"
            $HOSTTOOLS_DIR/cmplzma -k -2 -lzma $PROFILE_DIR/vmlinux $PROFILE_DIR/vmlinux.bin $PROFILE_DIR/vmlinux.lz
            cp $PROFILE_DIR/vmlinux.lz $TARGET_FS/.
            echo -e "/vmlinux.lz" >> $HOSTTOOLS_DIR/nocomprlist
        fi
        if [ "$BUILD_NAND_KERNEL_LZ4" = "y" ]; then
            echo "Compressing kernel using LZ4-HC"
            $HOSTTOOLS_DIR/cmplzma -k -2 -lz4 $PROFILE_DIR/vmlinux $PROFILE_DIR/vmlinux.bin $PROFILE_DIR/vmlinux.lz4
            cp $PROFILE_DIR/vmlinux.lz4 $TARGET_FS/.
            echo -e "/vmlinux.lz4" >> $HOSTTOOLS_DIR/nocomprlist
        fi

        [ ! -z ${BRCM_DTB} ] && cp -v ${DTB_FILE} $TARGET_FS/
        if [ "$CONFIG_BCM_ASTRA" = "y" ] ; then
            cp $PROFILE_DIR/../cfe/cfeastra${BRCM_CHIP}ram.bin $TARGET_FS/cferam.000
        else
            if [ "$BUILD_HND_EAP_UBOOT" = "y" ] ; then
               cp $PROFILE_DIR/../uboot/uboot${BRCM_CHIP}ram.bin $TARGET_FS/cferam.000
            else
               cp $PROFILE_DIR/../cfe/cfe${BRCM_CHIP}ram.bin $TARGET_FS/cferam.000
            fi
        fi
        if [ "$BRCM_KERNEL_AUXFS_JFFS2" != "y" ] ; then
           chmod u+w $TARGET_FS/etc/fstab
#           echo -e "mtd:data\t/data\tjffs2\t,\t\t0\t0\n" >> $TARGET_FS/etc/fstab
#           echo -e "ubi1:data\t/data\tubifs\tdefaults,noatime,rw\t\t0\t0\n" >> $TARGET_FS/etc/fstab

           chmod a-w $TARGET_FS/etc/fstab
        fi

        # copy fstab that does not mount rootfs as JFFS2
        cp -f $TARGET_FS/etc/fstab $PROFILE_DIR

        if [ "$BUILD_NAND_IMG_BLKSIZE_16KB" = "y" ]; then
        $HOSTTOOLS_DIR/mkfs.jffs2 $BRCM_ENDIAN_FLAGS -p -n -e $FLASH_NAND_BLOCK_16KB -r $TARGET_FS -o $PROFILE_DIR/jffs2_rootfs16kb.img -N $HOSTTOOLS_DIR/nocomprlist
        fi
        if [ "$BUILD_NAND_IMG_BLKSIZE_128KB" = "y" ]; then
        $HOSTTOOLS_DIR/mkfs.jffs2 $BRCM_ENDIAN_FLAGS -p -n -e $FLASH_NAND_BLOCK_128KB -r $TARGET_FS -o $PROFILE_DIR/jffs2_rootfs128kb.img -N $HOSTTOOLS_DIR/nocomprlist
        fi
        if [ "$BUILD_NAND_IMG_BLKSIZE_256KB" = "y" ]; then
        $HOSTTOOLS_DIR/mkfs.jffs2 $BRCM_ENDIAN_FLAGS -p -n -e $FLASH_NAND_BLOCK_256KB -r $TARGET_FS -o $PROFILE_DIR/jffs2_rootfs256kb.img -N $HOSTTOOLS_DIR/nocomprlist
        fi
        if [ "$BUILD_NAND_IMG_BLKSIZE_512KB" = "y" ]; then
        $HOSTTOOLS_DIR/mkfs.jffs2 $BRCM_ENDIAN_FLAGS -p -n -e $FLASH_NAND_BLOCK_512KB -r $TARGET_FS -o $PROFILE_DIR/jffs2_rootfs512kb.img -N $HOSTTOOLS_DIR/nocomprlist
        fi
        if [ "$BUILD_NAND_IMG_BLKSIZE_1024KB" = "y" ]; then
        $HOSTTOOLS_DIR/mkfs.jffs2 $BRCM_ENDIAN_FLAGS -p -n -e $FLASH_NAND_BLOCK_1024KB -r $TARGET_FS -o $PROFILE_DIR/jffs2_rootfs1024kb.img -N $HOSTTOOLS_DIR/nocomprlist
        fi

        if [ "$BUILD_SECURE_BOOT" = "y" ]; then

           $HOSTTOOLS_DIR/SecureBootUtils/makeEncryptedCfeRam --tdir $PROFILE_DIR/fs --cferam $CFE_RAM_FILE

           if [ "$BRCM_CHIP" = "63268" ]; then
              if [ ! -e "$PROFILE_DIR/vmlinux_secureboot" ]; then
                   echo "error: $PROFILE_DIR/vmlinux_secureboot not found! Check buildFS output"
                   exit 2
              fi 
              if [ ! -e "$PROFILE_DIR/vmlinux_secureboot.bin" ]; then
                   echo "error: $PROFILE_DIR/vmlinux_secureboot.bin not found! Check buildFS output"
                   exit 2
              fi 

              # replace the kernel with the secure boot nvram_3k capable kernel
              rm -f $TARGET_FS/vmlinux.lz $TARGET_FS/vmlinux.sig
              $HOSTTOOLS_DIR/cmplzma -k -2 -lzma $PROFILE_DIR/vmlinux_secureboot $PROFILE_DIR/vmlinux_secureboot.bin $PROFILE_DIR/vmlinux_secureboot.lz
              cp $PROFILE_DIR/vmlinux_secureboot.lz $TARGET_FS/vmlinux.lz
              $HOSTTOOLS_DIR/SecureBootUtils/makeVmlinuxSig $PROFILE_DIR $BRCM_CHIP
              cp $PROFILE_DIR/vmlinux_secureboot.sig $TARGET_FS/vmlinux.sig
           else
              $HOSTTOOLS_DIR/SecureBootUtils/makeVmlinuxSig $PROFILE_DIR $BRCM_CHIP
              cp $PROFILE_DIR/vmlinux.sig $TARGET_FS/.
           fi
           echo -e "/vmlinux.sig" >> $HOSTTOOLS_DIR/nocomprlist

            if [ "$BUILD_NAND_IMG_BLKSIZE_16KB" = "y" ]; then
                $HOSTTOOLS_DIR/mkfs.jffs2 $BRCM_ENDIAN_FLAGS -p -n -e $FLASH_NAND_BLOCK_16KB -r $TARGET_FS -o $PROFILE_DIR/jffs2_rootfs16kb_secureboot.img -N $HOSTTOOLS_DIR/nocomprlist
            fi
            if [ "$BUILD_NAND_IMG_BLKSIZE_128KB" = "y" ]; then
                $HOSTTOOLS_DIR/mkfs.jffs2 $BRCM_ENDIAN_FLAGS -p -n -e $FLASH_NAND_BLOCK_128KB -r $TARGET_FS -o $PROFILE_DIR/jffs2_rootfs128kb_secureboot.img -N $HOSTTOOLS_DIR/nocomprlist
            fi
            if [ "$BUILD_NAND_IMG_BLKSIZE_256KB" = "y" ]; then
                $HOSTTOOLS_DIR/mkfs.jffs2 $BRCM_ENDIAN_FLAGS -p -n -e $FLASH_NAND_BLOCK_256KB -r $TARGET_FS -o $PROFILE_DIR/jffs2_rootfs256kb_secureboot.img -N $HOSTTOOLS_DIR/nocomprlist
            fi
            if [ "$BUILD_NAND_IMG_BLKSIZE_512KB" = "y" ]; then
                $HOSTTOOLS_DIR/mkfs.jffs2 $BRCM_ENDIAN_FLAGS -p -n -e $FLASH_NAND_BLOCK_512KB -r $TARGET_FS -o $PROFILE_DIR/jffs2_rootfs512kb_secureboot.img -N $HOSTTOOLS_DIR/nocomprlist
            fi
            if [ "$BUILD_NAND_IMG_BLKSIZE_1024KB" = "y" ]; then
                $HOSTTOOLS_DIR/mkfs.jffs2 $BRCM_ENDIAN_FLAGS -p -n -e $FLASH_NAND_BLOCK_1024KB -r $TARGET_FS -o $PROFILE_DIR/jffs2_rootfs1024kb_secureboot.img -N $HOSTTOOLS_DIR/nocomprlist
            fi
        fi
        

#### JFFS2 BootFS/UBI RootFS
        # Create boot file system dir
        rm -rf $TARGET_BOOTFS
        mkdir $TARGET_BOOTFS
        chmod 777 $TARGET_BOOTFS
        mv $TARGET_FS/cferam.000 $TARGET_BOOTFS/.
        if [ -f $BUILD_DIR/shared/opensource/pmc/images/$BRCM_CHIP.bin ]; then
            echo copy $BRCM_CHIP.bin to $TARGET_BOOTFS/pmc.bin
            install -p $BUILD_DIR/shared/opensource/pmc/images/$BRCM_CHIP.bin $TARGET_BOOTFS/pmc.bin
        fi
        if [ -f $ASTRA_DIR/astra.elf ] && [ "$CONFIG_BCM_ASTRA" = "y" ] ; then
            echo "Compressing astra using LZMA"
            $HOSTTOOLS_DIR/cmplzma -k -2 -lzma $ASTRA_DIR/astra.elf $ASTRA_DIR/astra.bin $TARGET_BOOTFS/astra.lz
            echo "Building Astra device tree"
            $KERNEL_DIR/scripts/dtc/dtc -I dts -O dtb -o $TARGET_BOOTFS/astra.dtb $ASTRA_DIR/../kernel/devicetree/dt-tzos-9${BRCM_CHIP}.dts
        fi
	[ ! -z ${BRCM_DTB} ] && mv $TARGET_FS/${BRCM_DTB} ${TARGET_BOOTFS}/.
        rm -f $TARGET_BOOTFS/vmlinux.lz4;
        rm -f $TARGET_BOOTFS/vmlinux.lz;
        if [ "$BUILD_NAND_KERNEL_LZMA" = "y" ]; then
            echo copy vmlinux.lz to $TARGET_BOOTFS
            rm -f $TARGET_FS/vmlinux.lz
            cp $PROFILE_DIR/vmlinux.lz $TARGET_BOOTFS/.
        fi
        if [ "$BUILD_NAND_KERNEL_LZ4" = "y" ]; then
            echo copy vmlinux.lz4 to $TARGET_BOOTFS
            rm -f $TARGET_FS/vmlinux.lz4
            cp $PROFILE_DIR/vmlinux.lz4 $TARGET_BOOTFS/.
        fi

        mkdir -p $TARGET_FS/bootfs
        mkdir -p $TARGET_BOOTFS/etc

        cp $TARGET_FS/etc/image_version $TARGET_BOOTFS/etc/image_version
        echo -e "/etc/image_version" >> $HOSTTOOLS_DIR/nocomprlist

        echo -en "@(#) \$imageversion: " > $TARGET_BOOTFS/etc/image_ident
        cat $TARGET_FS/etc/image_version | tr -d "\n" >> $TARGET_BOOTFS/etc/image_ident
        echo -en " $\n@(#) \$imageversion: " >> $TARGET_BOOTFS/etc/image_ident
        cat $TARGET_FS/etc/image_version | tr -d "\n" >> $TARGET_BOOTFS/etc/image_ident
        echo -e " $" >> $TARGET_BOOTFS/etc/image_ident

        if [ -f $TARGET_FS/etc/JENKINS_CHANGELIST ];
        then
            echo -en "@(#) \$changelist: " >> $TARGET_BOOTFS/etc/image_ident
            cat $TARGET_FS/etc/JENKINS_CHANGELIST | tr -d "\n" >> $TARGET_BOOTFS/etc/image_ident
            echo -en " $\n@(#) \$changelist: " >> $TARGET_BOOTFS/etc/image_ident
            cat $TARGET_FS/etc/JENKINS_CHANGELIST | tr -d "\n" >> $TARGET_BOOTFS/etc/image_ident
            echo -e " $" >> $TARGET_BOOTFS/etc/image_ident
        fi

        echo -e "/etc/image_ident" >> $HOSTTOOLS_DIR/nocomprlist

        chmod u+w $TARGET_FS/etc/fstab
        echo -e "mtd:bootfs\t/bootfs\tjffs2\tro\t\t0\t0\n" >> $TARGET_FS/etc/fstab
        chmod a-w $TARGET_FS/etc/fstab
        echo -e "[ubifs]"                 > $PROFILE_DIR/ubi.ini
        echo -e "mode=ubi"               >> $PROFILE_DIR/ubi.ini
        echo -e "image=$PROFILE_DIR/rootfs.ubifs" >> $PROFILE_DIR/ubi.ini
        echo -e "vol_id=0"               >> $PROFILE_DIR/ubi.ini
        echo -e "vol_type=dynamic"       >> $PROFILE_DIR/ubi.ini
        echo -e "vol_name=rootfs_ubifs"  >> $PROFILE_DIR/ubi.ini
        echo -e "vol_flags=autoresize"   >> $PROFILE_DIR/ubi.ini

        echo -e "[ubifs]"                 > $PROFILE_DIR/squbi.ini
        echo -e "mode=ubi"               >> $PROFILE_DIR/squbi.ini
        echo -e "image=$PROFILE_DIR/squashfs.img" >> $PROFILE_DIR/squbi.ini
        echo -e "vol_id=0"               >> $PROFILE_DIR/squbi.ini
        echo -e "vol_type=static"        >> $PROFILE_DIR/squbi.ini
        echo -e "vol_name=rootfs_squashfs"  >> $PROFILE_DIR/squbi.ini
#        echo -e "vol_flags=autoresize"   >> $PROFILE_DIR/squbi.ini

        # -e == --lebsize = blocksize - 2xpagesize
        if [ "$BUILD_NAND_IMG_BLKSIZE_16KB" = "y" ]; then
            $HOSTTOOLS_DIR/mkfs.jffs2 $BRCM_ENDIAN_FLAGS -p -n -e $FLASH_NAND_BLOCK_16KB -r $TARGET_BOOTFS -o $PROFILE_DIR/bootfs16kb.img -N $HOSTTOOLS_DIR/nocomprlist
            $HOSTTOOLS_DIR/mtd-utils*/mkfs.ubifs -F -v -c 2560 -m 512 -e 15360 -x zlib -r $TARGET_FS -o $PROFILE_DIR/rootfs.ubifs
            $HOSTTOOLS_DIR/mtd-utils*/ubinize -v -o $PROFILE_DIR/ubi_rootfs16kb.img -m 512 -p $FLASH_NAND_BLOCK_16KB $PROFILE_DIR/ubi.ini
            mksquashfs_img squashfs.img
            $HOSTTOOLS_DIR/mtd-utils*/ubinize -v -o $PROFILE_DIR/squbi_rootfs16kb.img -m 512 -p $FLASH_NAND_BLOCK_16KB $PROFILE_DIR/squbi.ini
        fi

        if [ "$BUILD_NAND_IMG_BLKSIZE_128KB" = "y" ]; then
            $HOSTTOOLS_DIR/mkfs.jffs2 $BRCM_ENDIAN_FLAGS -p -n -e $FLASH_NAND_BLOCK_128KB -r $TARGET_BOOTFS -o $PROFILE_DIR/ibootfs128kb.img -N $HOSTTOOLS_DIR/nocomprlist
            $SUMTOOL $BRCM_ENDIAN_FLAGS -p -i $PROFILE_DIR/ibootfs128kb.img -o $PROFILE_DIR/bootfs128kb.img -e 128KiB -n
            rm -f $PROFILE_DIR/ibootfs128kb.img
            if [ "$BRCM_CHIP" = "68500" ]; then
                $HOSTTOOLS_DIR/mtd-utils*/mkfs.ubifs -F -v -c 2048 -m 2048 -e 129024 -x zlib -r $TARGET_FS -o $PROFILE_DIR/rootfs.ubifs
                $HOSTTOOLS_DIR/mtd-utils*/ubinize -v -o $PROFILE_DIR/ubi_rootfs128kb.img -m 2048 -s 512 -p $FLASH_NAND_BLOCK_128KB $PROFILE_DIR/ubi.ini
                mksquashfs_img squashfs.img
                $HOSTTOOLS_DIR/mtd-utils*/ubinize -v -o $PROFILE_DIR/squbi_rootfs128kb.img -m 2048 -s 512 -p $FLASH_NAND_BLOCK_128KB $PROFILE_DIR/squbi.ini
            else
                $HOSTTOOLS_DIR/mtd-utils*/mkfs.ubifs -F -v -c 2048 -m 2048 -e 126976 -x zlib -r $TARGET_FS -o $PROFILE_DIR/rootfs.ubifs
                $HOSTTOOLS_DIR/mtd-utils*/ubinize -v -o $PROFILE_DIR/ubi_rootfs128kb.img -m 2048 -p $FLASH_NAND_BLOCK_128KB $PROFILE_DIR/ubi.ini
                mksquashfs_img squashfs.img
                $HOSTTOOLS_DIR/mtd-utils*/ubinize -v -o $PROFILE_DIR/squbi_rootfs128kb.img -m 2048 -p $FLASH_NAND_BLOCK_128KB $PROFILE_DIR/squbi.ini
            fi
        fi

        if [ "$BUILD_NAND_IMG_BLKSIZE_256KB" = "y" ]; then
            $HOSTTOOLS_DIR/mkfs.jffs2 $BRCM_ENDIAN_FLAGS -p -n -e $FLASH_NAND_BLOCK_256KB -r $TARGET_BOOTFS -o $PROFILE_DIR/ibootfs256kb.img -N $HOSTTOOLS_DIR/nocomprlist
            $SUMTOOL $BRCM_ENDIAN_FLAGS -p -i $PROFILE_DIR/ibootfs256kb.img -o $PROFILE_DIR/bootfs256kb.img -e 256KiB -n
            rm -f $PROFILE_DIR/ibootfs256kb.img
            $HOSTTOOLS_DIR/mtd-utils*/mkfs.ubifs -F -v -c 2048 -m 4096 -e 253952 -x zlib -r $TARGET_FS -o $PROFILE_DIR/rootfs.ubifs
            $HOSTTOOLS_DIR/mtd-utils*/ubinize -v -o $PROFILE_DIR/ubi_rootfs256kb.img -m 4096 -p $FLASH_NAND_BLOCK_256KB $PROFILE_DIR/ubi.ini
            mksquashfs_img squashfs.img
            $HOSTTOOLS_DIR/mtd-utils*/ubinize -v -o $PROFILE_DIR/squbi_rootfs256kb.img -m 4096 -p $FLASH_NAND_BLOCK_256KB $PROFILE_DIR/squbi.ini
        fi

        if [ "$BUILD_NAND_IMG_BLKSIZE_512KB" = "y" ]; then
            $HOSTTOOLS_DIR/mkfs.jffs2 $BRCM_ENDIAN_FLAGS -p -n -e $FLASH_NAND_BLOCK_512KB -r $TARGET_BOOTFS -o $PROFILE_DIR/ibootfs512kb.img -N $HOSTTOOLS_DIR/nocomprlist
            $SUMTOOL $BRCM_ENDIAN_FLAGS -p -i $PROFILE_DIR/ibootfs512kb.img -o $PROFILE_DIR/bootfs512kb.img -e 512KiB -n
            rm -f $PROFILE_DIR/ibootfs512kb.img
            $HOSTTOOLS_DIR/mtd-utils*/mkfs.ubifs -F -v -c 2048 -m 4096 -e 516096 -x zlib -r $TARGET_FS -o $PROFILE_DIR/rootfs.ubifs
            $HOSTTOOLS_DIR/mtd-utils*/ubinize -v -o $PROFILE_DIR/ubi_rootfs512kb.img -m 4096 -p $FLASH_NAND_BLOCK_512KB $PROFILE_DIR/ubi.ini
            mksquashfs_img squashfs.img
            $HOSTTOOLS_DIR/mtd-utils*/ubinize -v -o $PROFILE_DIR/squbi_rootfs512kb.img -m 4096 -p $FLASH_NAND_BLOCK_512KB $PROFILE_DIR/squbi.ini
        fi

        if [ "$BUILD_NAND_IMG_BLKSIZE_1024KB" = "y" ]; then
            $HOSTTOOLS_DIR/mkfs.jffs2 $BRCM_ENDIAN_FLAGS -p -n -e $FLASH_NAND_BLOCK_1024KB -r $TARGET_BOOTFS -o $PROFILE_DIR/ibootfs1024kb.img -N $HOSTTOOLS_DIR/nocomprlist
            $SUMTOOL $BRCM_ENDIAN_FLAGS -p -i $PROFILE_DIR/ibootfs1024kb.img -o $PROFILE_DIR/bootfs1024kb.img -e 1024KiB -n
            rm -f $PROFILE_DIR/ibootfs1024kb.img
            $HOSTTOOLS_DIR/mtd-utils*/mkfs.ubifs -F -v -c 2048 -m 8192 -e 1032192 -x zlib -r $TARGET_FS -o $PROFILE_DIR/rootfs.ubifs
            $HOSTTOOLS_DIR/mtd-utils*/ubinize -v -o $PROFILE_DIR/ubi_rootfs1024kb.img -m 8192 -p $FLASH_NAND_BLOCK_1024KB $PROFILE_DIR/ubi.ini
            mksquashfs_img squashfs.img
            $HOSTTOOLS_DIR/mtd-utils*/ubinize -v -o $PROFILE_DIR/squbi_rootfs1024kb.img -m 8192 -p $FLASH_NAND_BLOCK_1024KB $PROFILE_DIR/squbi.ini
        fi

#        rm $PROFILE_DIR/rootfs.ubifs


        if [ "$BUILD_SECURE_BOOT" = "y" ]; then

           if [ "$BRCM_CHIP" = "63268" ]; then
              rm -f $TARGET_BOOTFS/vmlinux.lz
              cp $PROFILE_DIR/vmlinux_secureboot.lz $TARGET_BOOTFS/vmlinux.lz
           fi

           mv $TARGET_FS/secram.000 $TARGET_BOOTFS/.
	   if [ -f $TARGET_FS/secmfg.000 ]; then
              mv $TARGET_FS/secmfg.000 $TARGET_BOOTFS/.
           fi
           mv $TARGET_FS/vmlinux.sig $TARGET_BOOTFS/.

           if [ "$BUILD_NAND_IMG_BLKSIZE_16KB" = "y" ]; then
               $HOSTTOOLS_DIR/mkfs.jffs2 $BRCM_ENDIAN_FLAGS -p -n -e $FLASH_NAND_BLOCK_16KB -r $TARGET_BOOTFS -o $PROFILE_DIR/bootfs16kb_secureboot.img -N $HOSTTOOLS_DIR/nocomprlist
           fi
           if [ "$BUILD_NAND_IMG_BLKSIZE_128KB" = "y" ]; then
               $HOSTTOOLS_DIR/mkfs.jffs2 $BRCM_ENDIAN_FLAGS -p -n -e $FLASH_NAND_BLOCK_128KB -r $TARGET_BOOTFS -o $PROFILE_DIR/bootfs128kb_secureboot.img -N $HOSTTOOLS_DIR/nocomprlist
           fi
           if [ "$BUILD_NAND_IMG_BLKSIZE_256KB" = "y" ]; then
               $HOSTTOOLS_DIR/mkfs.jffs2 $BRCM_ENDIAN_FLAGS -p -n -e $FLASH_NAND_BLOCK_256KB -r $TARGET_BOOTFS -o $PROFILE_DIR/bootfs256kb_secureboot.img -N $HOSTTOOLS_DIR/nocomprlist
           fi
           if [ "$BUILD_NAND_IMG_BLKSIZE_512KB" = "y" ]; then
               $HOSTTOOLS_DIR/mkfs.jffs2 $BRCM_ENDIAN_FLAGS -p -n -e $FLASH_NAND_BLOCK_512KB -r $TARGET_BOOTFS -o $PROFILE_DIR/bootfs512kb_secureboot.img -N $HOSTTOOLS_DIR/nocomprlist
           fi
           if [ "$BUILD_NAND_IMG_BLKSIZE_1024KB" = "y" ]; then
               $HOSTTOOLS_DIR/mkfs.jffs2 $BRCM_ENDIAN_FLAGS -p -n -e $FLASH_NAND_BLOCK_1024KB -r $TARGET_BOOTFS -o $PROFILE_DIR/bootfs1024kb_secureboot.img -N $HOSTTOOLS_DIR/nocomprlist
           fi
        fi

# put back fstab that does not mount rootfs as JFFS2
        mv $PROFILE_DIR/fstab $TARGET_FS/etc
        rmdir $TARGET_FS/bootfs

        # -e == --lebsize = blocksize - 2xpagesize
        if [ "$BUILD_NAND_IMG_BLKSIZE_128KB" = "y" ]; then
            # pureUBI
            $HOSTTOOLS_DIR/mtd-utils*/mkfs.ubifs -F -v -c 2048 -m 2048 -e 126976 -x zlib -r $TARGET_FS -o $PROFILE_DIR/rootfs.ubifs # re-ubinize file system with new fstab that does not mount JFFS2 to bootfs
            $PROFILE_DIR/../buildUBI -u $PROFILE_DIR/ubi_full.ini -m $PROFILE_DIR/metadata.bin -f $PROFILE_DIR/filestruct_full.bin -t $TARGET_BOOTFS -y $PROFILE_DIR/rootfs.ubifs
            $HOSTTOOLS_DIR/mtd-utils*/ubinize -v -o $PROFILE_DIR/ubi_rootfs128kb_pureubi.img -m 2048 -p $FLASH_NAND_BLOCK_128KB $PROFILE_DIR/ubi_full.ini

            # squash on pureUBI
            mksquashfs_img squashfs.img
            $PROFILE_DIR/../buildUBI -u $PROFILE_DIR/ubi_full.ini -m $PROFILE_DIR/metadata.bin -f $PROFILE_DIR/filestruct_full.bin -t $TARGET_BOOTFS -y $PROFILE_DIR/squashfs.img -s 1
            $HOSTTOOLS_DIR/mtd-utils*/ubinize -v -o $PROFILE_DIR/squbi_rootfs128kb_pureubi.img -m 2048 -p $FLASH_NAND_BLOCK_128KB $PROFILE_DIR/ubi_full.ini
        fi

        if [ "$BUILD_NAND_IMG_BLKSIZE_256KB" = "y" ]; then
            # pureUBI
            $HOSTTOOLS_DIR/mtd-utils*/mkfs.ubifs -F -v -c 2048 -m 4096 -e 253952 -x zlib -r $TARGET_FS -o $PROFILE_DIR/rootfs.ubifs # re-ubinize file system with new fstab that does not mount JFFS2 to bootfs
            $PROFILE_DIR/../buildUBI -u $PROFILE_DIR/ubi_full.ini -m $PROFILE_DIR/metadata.bin -f $PROFILE_DIR/filestruct_full.bin -t $TARGET_BOOTFS -y $PROFILE_DIR/rootfs.ubifs
            $HOSTTOOLS_DIR/mtd-utils*/ubinize -v -o $PROFILE_DIR/ubi_rootfs256kb_pureubi.img -m 4096 -p $FLASH_NAND_BLOCK_256KB $PROFILE_DIR/ubi_full.ini

            # squash on pureUBI
            mksquashfs_img squashfs.img
            $PROFILE_DIR/../buildUBI -u $PROFILE_DIR/ubi_full.ini -m $PROFILE_DIR/metadata.bin -f $PROFILE_DIR/filestruct_full.bin -t $TARGET_BOOTFS -y $PROFILE_DIR/squashfs.img -s 1
            $HOSTTOOLS_DIR/mtd-utils*/ubinize -v -o $PROFILE_DIR/squbi_rootfs256kb_pureubi.img -m 4096 -p $FLASH_NAND_BLOCK_256KB $PROFILE_DIR/ubi_full.ini
        fi

        if [ "$BUILD_NAND_IMG_BLKSIZE_512KB" = "y" ]; then
            # pureUBI
            $HOSTTOOLS_DIR/mtd-utils*/mkfs.ubifs -F -v -c 2048 -m 4096 -e 516096 -x zlib -r $TARGET_FS -o $PROFILE_DIR/rootfs.ubifs # re-ubinize file system with new fstab that does not mount JFFS2 to bootfs
            $PROFILE_DIR/../buildUBI -u $PROFILE_DIR/ubi_full.ini -m $PROFILE_DIR/metadata.bin -f $PROFILE_DIR/filestruct_full.bin -t $TARGET_BOOTFS -y $PROFILE_DIR/rootfs.ubifs
            $HOSTTOOLS_DIR/mtd-utils*/ubinize -v -o $PROFILE_DIR/ubi_rootfs512kb_pureubi.img -m 4096 -p $FLASH_NAND_BLOCK_512KB $PROFILE_DIR/ubi_full.ini

            # squash on pureUBI
            mksquashfs_img squashfs.img
            $PROFILE_DIR/../buildUBI -u $PROFILE_DIR/ubi_full.ini -m $PROFILE_DIR/metadata.bin -f $PROFILE_DIR/filestruct_full.bin -t $TARGET_BOOTFS -y $PROFILE_DIR/squashfs.img -s 1
            $HOSTTOOLS_DIR/mtd-utils*/ubinize -v -o $PROFILE_DIR/squbi_rootfs512kb_pureubi.img -m 4096 -p $FLASH_NAND_BLOCK_512KB $PROFILE_DIR/ubi_full.ini
        fi

        if [ "$BUILD_NAND_IMG_BLKSIZE_1024KB" = "y" ]; then
            # pureUBI
            $HOSTTOOLS_DIR/mtd-utils*/mkfs.ubifs -F -v -c 2048 -m 8192 -e 1032192 -x zlib -r $TARGET_FS -o $PROFILE_DIR/rootfs.ubifs # re-ubinize file system with new fstab that does not mount JFFS2 to bootfs
            $PROFILE_DIR/../buildUBI -u $PROFILE_DIR/ubi_full.ini -m $PROFILE_DIR/metadata.bin -f $PROFILE_DIR/filestruct_full.bin -t $TARGET_BOOTFS -y $PROFILE_DIR/rootfs.ubifs
            $HOSTTOOLS_DIR/mtd-utils*/ubinize -v -o $PROFILE_DIR/ubi_rootfs1024kb_pureubi.img -m 8192 -p $FLASH_NAND_BLOCK_1024KB $PROFILE_DIR/ubi_full.ini

            # squash on pureUBI
            mksquashfs_img squashfs.img
            $PROFILE_DIR/../buildUBI -u $PROFILE_DIR/ubi_full.ini -m $PROFILE_DIR/metadata.bin -f $PROFILE_DIR/filestruct_full.bin -t $TARGET_BOOTFS -y $PROFILE_DIR/squashfs.img -s 1
            $HOSTTOOLS_DIR/mtd-utils*/ubinize -v -o $PROFILE_DIR/squbi_rootfs1024kb_pureubi.img -m 8192 -p $FLASH_NAND_BLOCK_1024KB $PROFILE_DIR/ubi_full.ini
        fi

        rm $HOSTTOOLS_DIR/nocomprlist

fi

