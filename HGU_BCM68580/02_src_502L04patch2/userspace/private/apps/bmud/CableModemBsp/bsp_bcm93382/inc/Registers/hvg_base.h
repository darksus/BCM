// ****************************************************************************
//
// Copyright (c) 2009 Broadcom Corporation
//
// This program is the proprietary software of Broadcom Corporation and/or
// its licensors, and may only be used, duplicated, modified or distributed
// pursuant to the terms and conditions of a separate, written license
// agreement executed between you and Broadcom (an "Authorized License").
// Except as set forth in an Authorized License, Broadcom grants no license
// (express or implied), right to use, or waiver of any kind with respect to
// the Software, and Broadcom expressly reserves all rights in and to the
// Software and all intellectual property rights therein.  IF YOU HAVE NO
// AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE IN ANY WAY,
// AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE ALL USE OF THE
// SOFTWARE.  
//
// Except as expressly set forth in the Authorized License,
//
// 1.     This program, including its structure, sequence and organization,
// constitutes the valuable trade secrets of Broadcom, and you shall use all
// reasonable efforts to protect the confidentiality thereof, and to use this
// information only in connection with your use of Broadcom integrated circuit
// products.
//
// 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED
// "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES, REPRESENTATIONS
// OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH
// RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY DISCLAIMS ANY AND ALL
// IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR
// A PARTICULAR PURPOSE, LACK OF VIRUSES, ACCURACY OR COMPLETENESS, QUIET
// ENJOYMENT, QUIET POSSESSION OR CORRESPONDENCE TO DESCRIPTION. YOU ASSUME
// THE ENTIRE RISK ARISING OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
//
// 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL BROADCOM
// OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL, INCIDENTAL, SPECIAL,
// INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER ARISING OUT OF OR IN ANY WAY
// RELATING TO YOUR USE OF OR INABILITY TO USE THE SOFTWARE EVEN IF BROADCOM
// HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN
// EXCESS OF THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR U.S. $1,
// WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING ANY
// FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.
//
// ****************************************************************************
//
//  Filename:         hvg_base.h
//  Generated by:     RDB Utility
//  Creation Date:    12/4/2009
//  Command Line:     rdb.pl bcm3382_a0.rdb2 -header rdb_output/headers_borked -camelcase -nounroll --addrtest=rdb_output/test_borked.c -R
// ****************************************************************************
//
// IMPORTANT: DO NOT MODIFY, THIS IS AN AUTOGENERATED FILE. 
// Please modify the source .rdb file instead if you need to change this file. 
// Contact Jeff Bauch if you need more information.
//
// ****************************************************************************
#ifndef HVG_BASE_H__
#define HVG_BASE_H__


typedef union {
  struct {
    uint32 SoftInitSarAdcTiming     :1; 
    uint32 BmuHvgStiTwosComp        :1; 
    uint32 BmuHvgAdcClkMode         :1; 
    uint32 VInputDefaultOrBmu       :1; 
    uint32 Reserved                 :4; 
    uint32 HvgPwmHyst               :8; 
    uint32 Reserved2                :3; 
    uint32 HvgMultiSpeed            :1; 
    uint32 HvgFastRecoveryThr       :12;
  } Bits;
  uint32 Reg32;
}  HvgBaseHvgAux0;

typedef union {
  struct {
    uint32 Reserved                 :7; 
    uint32 SarTimOffsetHvgb         :9; 
    uint32 Reserved2                :7; 
    uint32 SarTimOffsetHvga         :9; 
  } Bits;
  uint32 Reg32;
}  HvgBaseHvgAux1;

typedef union {
  struct {
    uint32 Reserved                 :7; 
    uint32 SarTimOffsetBmub         :9; 
    uint32 Reserved2                :7; 
    uint32 SarTimOffsetBmua         :9; 
  } Bits;
  uint32 Reg32;
}  HvgBaseHvgAux2;

typedef union {
  struct {
    uint32 Reserved                 :16;
    uint32 HiSenseModeB             :1; 
    uint32 HiSenseModeA             :1; 
    uint32 Reserved2                :4; 
    uint32 HvgHiSensThr             :10;
  } Bits;
  uint32 Reg32;
}  HvgBaseHvgAux3;

typedef union {
  struct {
    uint32 Reserved                 :1; 
    uint32 CondScaleVTip            :15;
    uint32 Reserved2                :1; 
    uint32 CondScaleVHvg            :15;
  } Bits;
  uint32 Reg32;
}  HvgBaseHvgReg0;

typedef union {
  struct {
    uint32 Reserved                 :1; 
    uint32 CondScaleILoop           :15;
    uint32 Reserved2                :1; 
    uint32 CondScaleVRing           :15;
  } Bits;
  uint32 Reg32;
}  HvgBaseHvgReg1;

typedef union {
  struct {
    uint32 PulseStartPhase          :8; 
    uint32 Reserved                 :1; 
    uint32 DecaySpeed               :3; 
    uint32 Reserved2                :2; 
    uint32 OffHookMin               :9; 
    uint32 OffHookOvhd              :9; 
  } Bits;
  uint32 Reg32;
}  HvgBaseHvgReg10;

typedef union {
  struct {
    uint32 TurnsRatio               :10;
    uint32 HvgSerTstInject          :1; 
    uint32 RingDelay                :5; 
    uint32 Reserved                 :16;
  } Bits;
  uint32 Reg32;
}  HvgBaseHvgReg11;

typedef union {
  struct {
    uint32 ShiftVBat                :4; 
    uint32 OffsetVBat               :13;
    uint32 ScaleVBat                :15;
  } Bits;
  uint32 Reg32;
}  HvgBaseHvgReg12;

typedef union {
  struct {
    uint32 Reserved                 :2; 
    uint32 NewBlkRqstA              :1; 
    uint32 SlewWindowSizesA         :1; 
    uint32 CalWindowSizeA           :4; 
    uint32 TpRgWindowSizeA          :4; 
    uint32 InputWindowSizeA         :4; 
    uint32 LoopWindowSizeA          :4; 
    uint32 RingWindowSizeA          :4; 
    uint32 TipWindowSizeA           :4; 
    uint32 VhvgWindowSizeA          :4; 
  } Bits;
  uint32 Reg32;
}  HvgBaseHvgReg13;

typedef union {
  struct {
    uint32 Reserved                 :4; 
    uint32 MaxHvg2Slic              :12;
    uint32 Reserved2                :4; 
    uint32 ConstVoltGoalA           :12;
  } Bits;
  uint32 Reg32;
}  HvgBaseHvgReg14;

typedef union {
  struct {
    uint32 Reserved                 :13;
    uint32 SingleMuxCtrlA           :3; 
    uint32 HvgRrSingleA             :1; 
    uint32 HvgSoftInitA             :1; 
    uint32 HvgModeA                 :2; 
    uint32 ContOrBlockA             :1; 
    uint32 SerTstOutputSelA         :3; 
    uint32 KIntegA                  :4; 
    uint32 KPropA                   :4; 
  } Bits;
  uint32 Reg32;
}  HvgBaseHvgReg15;

typedef union {
  struct {
    uint32 Reserved                 :2; 
    uint32 NewBlkRqstB              :1; 
    uint32 SlewWindowSizesB         :1; 
    uint32 CalWindowSizeB           :4; 
    uint32 TpRgWindowSizeB          :4; 
    uint32 InputWindowSizeB         :4; 
    uint32 LoopWindowSizeB          :4; 
    uint32 RingWindowSizeB          :4; 
    uint32 TipWindowSizeB           :4; 
    uint32 VhvgWindowSizeB          :4; 
  } Bits;
  uint32 Reg32;
}  HvgBaseHvgReg17;

typedef union {
  struct {
    uint32 Reserved                 :20;
    uint32 ConstVoltGoalB           :12;
  } Bits;
  uint32 Reg32;
}  HvgBaseHvgReg18;

typedef union {
  struct {
    uint32 Reserved                 :13;
    uint32 SingleMuxCtrlB           :3; 
    uint32 HvgRrSingleB             :1; 
    uint32 HvgSoftInitB             :1; 
    uint32 HvgModeB                 :2; 
    uint32 ContOrBlockB             :1; 
    uint32 SerTstOutputSelB         :3; 
    uint32 KIntegB                  :4; 
    uint32 KPropB                   :4; 
  } Bits;
  uint32 Reg32;
}  HvgBaseHvgReg19;

typedef union {
  struct {
    uint32 Reserved                 :1; 
    uint32 CondScaleCal             :15;
    uint32 Reserved2                :1; 
    uint32 CondScaleVInput          :15;
  } Bits;
  uint32 Reg32;
}  HvgBaseHvgReg2;

typedef union {
  struct {
    uint32 Reserved                 :3; 
    uint32 CondOffsetVTip           :13;
    uint32 Reserved2                :3; 
    uint32 CondOffsetVHvg           :13;
  } Bits;
  uint32 Reg32;
}  HvgBaseHvgReg3;

typedef union {
  struct {
    uint32 Reserved                 :3; 
    uint32 CondOffsetILoop          :13;
    uint32 Reserved2                :3; 
    uint32 CondOffsetVRing          :13;
  } Bits;
  uint32 Reg32;
}  HvgBaseHvgReg4;

typedef union {
  struct {
    uint32 Reserved                 :3; 
    uint32 CondOffsetCal            :13;
    uint32 Reserved2                :3; 
    uint32 CondOffsetVInput         :13;
  } Bits;
  uint32 Reg32;
}  HvgBaseHvgReg5;

typedef union {
  struct {
    uint32 Reserved                 :1; 
    uint32 HvgSoftInit              :1; 
    uint32 BgTrimSource             :1; 
    uint32 HvgIgnoreReset           :1; 
    uint32 DiodeDrop                :4; 
    uint32 CondShiftCal             :4; 
    uint32 CondShiftVInput          :4; 
    uint32 CondShiftILoop           :4; 
    uint32 CondShiftVRing           :4; 
    uint32 CondShiftVTip            :4; 
    uint32 CondShiftVHvg            :4; 
  } Bits;
  uint32 Reg32;
}  HvgBaseHvgReg6;

typedef union {
  struct {
    uint32 Reserved                 :4; 
    uint32 OffHookMax               :12;
    uint32 Reserved2                :4; 
    uint32 RingTrackMax             :12;
  } Bits;
  uint32 Reg32;
}  HvgBaseHvgReg7;

typedef union {
  struct {
    uint32 ShortCircuitThshld       :8; 
    uint32 MinOnTime                :8; 
    uint32 MinDutyCycle             :8; 
    uint32 MaxDutyCycle             :8; 
  } Bits;
  uint32 Reg32;
}  HvgBaseHvgReg8;

typedef union {
  struct {
    uint32 HvgCommonRingRef         :1; 
    uint32 Reserved                 :3; 
    uint32 RingOvhd                 :12;
    uint32 RingGain                 :16;
  } Bits;
  uint32 Reg32;
}  HvgBaseHvgReg9;

typedef union {
  struct {
    uint32 Reserved                 :1; 
    uint32 VhvgOobB                 :1; 
    uint32 HvgInstValidB            :1; 
    uint32 HvgInstB                 :13;
    uint32 Reserved2                :1; 
    uint32 HvgOobA                  :1; 
    uint32 HvgInstValidA            :1; 
    uint32 HvgInstA                 :13;
  } Bits;
  uint32 Reg32;
}  HvgBaseHvgStatus1;

typedef union {
  struct {
    uint32 Reserved                 :2; 
    uint32 VtipAvgValid             :1; 
    uint32 VtipSat                  :1; 
    uint32 VtipWindowSlew           :4; 
    uint32 Reserved2                :3; 
    uint32 VtipMean                 :21;
  } Bits;
  uint32 Reg32;
}  HvgBaseHvgStatus10;

typedef union {
  struct {
    uint32 Reserved                 :2; 
    uint32 VtipAvgValid             :1; 
    uint32 VtipSat                  :1; 
    uint32 VtipWindowSlew           :4; 
    uint32 Reserved2                :3; 
    uint32 VtipMean                 :21;
  } Bits;
  uint32 Reg32;
}  HvgBaseHvgStatus11;

typedef union {
  struct {
    uint32 Reserved                 :2; 
    uint32 VringAvgValid            :1; 
    uint32 VringSat                 :1; 
    uint32 VringWindowSlew          :4; 
    uint32 Reserved2                :3; 
    uint32 VringMean                :21;
  } Bits;
  uint32 Reg32;
}  HvgBaseHvgStatus12;

typedef union {
  struct {
    uint32 Reserved                 :2; 
    uint32 VringAvgValid            :1; 
    uint32 VringSat                 :1; 
    uint32 VringWindowSlew          :4; 
    uint32 Reserved2                :3; 
    uint32 VringMean                :21;
  } Bits;
  uint32 Reg32;
}  HvgBaseHvgStatus13;

typedef union {
  struct {
    uint32 Reserved                 :2; 
    uint32 VringAvgValid            :1; 
    uint32 VringSat                 :1; 
    uint32 VringWindowSlew          :4; 
    uint32 Reserved2                :3; 
    uint32 VringMean                :21;
  } Bits;
  uint32 Reg32;
}  HvgBaseHvgStatus14;

typedef union {
  struct {
    uint32 Reserved                 :2; 
    uint32 VtprgAvgValid            :1; 
    uint32 VtprgSat                 :1; 
    uint32 VtprgWindowSlew          :4; 
    uint32 Reserved2                :3; 
    uint32 VtprgMean                :21;
  } Bits;
  uint32 Reg32;
}  HvgBaseHvgStatus15;

typedef union {
  struct {
    uint32 Reserved                 :2; 
    uint32 IloopAvgValid            :1; 
    uint32 IloopSat                 :1; 
    uint32 IloopWindowSlew          :4; 
    uint32 Reserved2                :3; 
    uint32 IloopMean                :21;
  } Bits;
  uint32 Reg32;
}  HvgBaseHvgStatus16;

typedef union {
  struct {
    uint32 Reserved                 :2; 
    uint32 IloopAvgValid            :1; 
    uint32 IloopSat                 :1; 
    uint32 IloopWindowSlew          :4; 
    uint32 Reserved2                :3; 
    uint32 IloopMean                :21;
  } Bits;
  uint32 Reg32;
}  HvgBaseHvgStatus17;

typedef union {
  struct {
    uint32 Reserved                 :2; 
    uint32 VinputAvgValid           :1; 
    uint32 VinputSat                :1; 
    uint32 VinputWindowSlew         :4; 
    uint32 Reserved2                :3; 
    uint32 VinputMean               :21;
  } Bits;
  uint32 Reg32;
}  HvgBaseHvgStatus18;

typedef union {
  struct {
    uint32 Reserved                 :2; 
    uint32 VinputAvgValid           :1; 
    uint32 VinputSat                :1; 
    uint32 VinputWindowSlew         :4; 
    uint32 Reserved2                :3; 
    uint32 VinputMean               :21;
  } Bits;
  uint32 Reg32;
}  HvgBaseHvgStatus19;

typedef union {
  struct {
    uint32 Reserved                 :1; 
    uint32 VtipOobB                 :1; 
    uint32 VtipInstValidB           :1; 
    uint32 VtipInstB                :13;
    uint32 Reserved2                :1; 
    uint32 VtipOobA                 :1; 
    uint32 VtipInstValidA           :1; 
    uint32 VtipInstA                :13;
  } Bits;
  uint32 Reg32;
}  HvgBaseHvgStatus2;

typedef union {
  struct {
    uint32 Reserved                 :2; 
    uint32 CalAvgValid              :1; 
    uint32 CalSat                   :1; 
    uint32 CalWindowSlew            :4; 
    uint32 Reserved2                :3; 
    uint32 CalMean                  :21;
  } Bits;
  uint32 Reg32;
}  HvgBaseHvgStatus20;

typedef union {
  struct {
    uint32 Reserved                 :2; 
    uint32 CalAvgValid              :1; 
    uint32 CalSat                   :1; 
    uint32 CalWindowSlew            :4; 
    uint32 Reserved2                :3; 
    uint32 CalMean                  :21;
  } Bits;
  uint32 Reg32;
}  HvgBaseHvgStatus21;

typedef union {
  struct {
    uint32 Reserved                 :1; 
    uint32 VringOobB                :1; 
    uint32 VringValidB              :1; 
    uint32 VringInstB               :13;
    uint32 Reserved2                :1; 
    uint32 VringOobA                :1; 
    uint32 VringInstValidA          :1; 
    uint32 VringInstA               :13;
  } Bits;
  uint32 Reg32;
}  HvgBaseHvgStatus3;

typedef union {
  struct {
    uint32 Reserved                 :1; 
    uint32 IloopOobB                :1; 
    uint32 IloopValidB              :1; 
    uint32 IloopInstB               :13;
    uint32 Reserved2                :1; 
    uint32 IloopOobA                :1; 
    uint32 IloopInstValidA          :1; 
    uint32 IloopInstA               :13;
  } Bits;
  uint32 Reg32;
}  HvgBaseHvgStatus4;

typedef union {
  struct {
    uint32 Reserved                 :1; 
    uint32 VinputOobB               :1; 
    uint32 VinputValidB             :1; 
    uint32 VinputInstB              :13;
    uint32 Reserved2                :1; 
    uint32 VinputOobA               :1; 
    uint32 VinputInstValidA         :1; 
    uint32 VinputInstA              :13;
  } Bits;
  uint32 Reg32;
}  HvgBaseHvgStatus5;

typedef union {
  struct {
    uint32 Reserved                 :1; 
    uint32 CalOobB                  :1; 
    uint32 CalValidB                :1; 
    uint32 CalInstB                 :13;
    uint32 Reserved2                :1; 
    uint32 CalOobA                  :1; 
    uint32 CalInstValidA            :1; 
    uint32 CalInstA                 :13;
  } Bits;
  uint32 Reg32;
}  HvgBaseHvgStatus6;

typedef union {
  struct {
    uint32 HvgDutyCycleB            :8; 
    uint32 HvgDutyCycleA            :8; 
    uint32 Reserved                 :4; 
    uint32 HvgShortFlagB            :1; 
    uint32 HvgShortFlagA            :1; 
    uint32 HvgDutyCycleLimitedB     :1; 
    uint32 HvgDutyCycleLimitedA     :1; 
    uint32 MaxDivOobB               :1; 
    uint32 MaxDivOobA               :1; 
    uint32 MaxMultOobB              :1; 
    uint32 MaxMultOobA              :1; 
    uint32 ArbiterErrB              :1; 
    uint32 ArbiterErrA              :1; 
    uint32 AvgBlockDoneB            :1; 
    uint32 AvgBlockDoneA            :1; 
  } Bits;
  uint32 Reg32;
}  HvgBaseHvgStatus7;

typedef union {
  struct {
    uint32 Reserved                 :2; 
    uint32 VhvgAvgValid             :1; 
    uint32 VhvgSat                  :1; 
    uint32 VhvgWindowSlew           :4; 
    uint32 Reserved2                :3; 
    uint32 VhvgMean                 :21;
  } Bits;
  uint32 Reg32;
}  HvgBaseHvgStatus8;

typedef union {
  struct {
    uint32 Reserved                 :2; 
    uint32 VhvgAvgValid             :1; 
    uint32 VhvgSat                  :1; 
    uint32 VhvgWindowSlew           :4; 
    uint32 Reserved2                :3; 
    uint32 VhvgMean                 :21;
  } Bits;
  uint32 Reg32;
}  HvgBaseHvgStatus9;

typedef struct {
  HvgBaseHvgReg0                      Reg0;                    
  HvgBaseHvgReg1                      Reg1;                    
  HvgBaseHvgReg2                      Reg2;                    
  HvgBaseHvgReg3                      Reg3;                    
  HvgBaseHvgReg4                      Reg4;                    
  HvgBaseHvgReg5                      Reg5;                    
  HvgBaseHvgReg6                      Reg6;                    
  HvgBaseHvgReg7                      Reg7;                    
  HvgBaseHvgReg8                      Reg8;                    
  HvgBaseHvgReg9                      Reg9;                    
  HvgBaseHvgReg10                     Reg10;                   
  HvgBaseHvgReg11                     Reg11;                   
  HvgBaseHvgReg12                     Reg12;                   
  HvgBaseHvgStatus1                   Status1;                 
  HvgBaseHvgStatus2                   Status2;                 
  HvgBaseHvgStatus3                   Status3;                 
  HvgBaseHvgStatus4                   Status4;                 
  HvgBaseHvgStatus5                   Status5;                 
  HvgBaseHvgStatus6                   Status6;                 
  HvgBaseHvgStatus7                   Status7;                 
  HvgBaseHvgStatus8                   Status8;                 
  HvgBaseHvgStatus9                   Status9;                 
  HvgBaseHvgStatus10                  Status10;                
  HvgBaseHvgStatus11                  Status11;                
  HvgBaseHvgStatus12                  Status12;                
  HvgBaseHvgStatus13                  Status13;                
  HvgBaseHvgStatus14                  Status14;                
  HvgBaseHvgStatus15                  Status15;                
  HvgBaseHvgStatus16                  Status16;                
  HvgBaseHvgStatus17                  Status17;                
  HvgBaseHvgStatus18                  Status18;                
  HvgBaseHvgStatus19                  Status19;                
  HvgBaseHvgStatus20                  Status20;                
  HvgBaseHvgStatus21                  Status21;                
  uint32                              Status22;                
  uint32                              Status23;                
  uint32                              Status24;                
  uint32                              Status25;                
  uint32                              Status26;                
  uint32                              Status27;                
  uint32                              Status28;                
  uint32                              Status29;                
  uint32                              Status30;                
  uint32                              Status31;                
  uint32                              Status32;                
  uint32                              Status33;                
  uint32                              Status34;                
  uint32                              Status35;                
  HvgBaseHvgAux0                      Aux0;                    
  HvgBaseHvgAux1                      Aux1;                    
  HvgBaseHvgAux2                      Aux2;                    
  HvgBaseHvgAux3                      Aux3;                    
  uint8                               Pad0[0x30];
  HvgBaseHvgReg13                     Reg13;                   
  HvgBaseHvgReg14                     Reg14;                   
  HvgBaseHvgReg15                     Reg15;                   
  uint32                              Reg16;                   
  uint8                               Pad1[0x70];
  HvgBaseHvgReg17                     Reg17;                   
  HvgBaseHvgReg18                     Reg18;                   
  HvgBaseHvgReg19                     Reg19;                   
  uint32                              Reg20;                   
}  HvgBaseHvgBaseHvgBase;

#endif 



