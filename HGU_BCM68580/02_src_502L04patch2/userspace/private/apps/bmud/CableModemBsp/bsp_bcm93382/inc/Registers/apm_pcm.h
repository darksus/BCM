// ****************************************************************************
//
// Copyright (c) 2009 Broadcom Corporation
//
// This program is the proprietary software of Broadcom Corporation and/or
// its licensors, and may only be used, duplicated, modified or distributed
// pursuant to the terms and conditions of a separate, written license
// agreement executed between you and Broadcom (an "Authorized License").
// Except as set forth in an Authorized License, Broadcom grants no license
// (express or implied), right to use, or waiver of any kind with respect to
// the Software, and Broadcom expressly reserves all rights in and to the
// Software and all intellectual property rights therein.  IF YOU HAVE NO
// AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE IN ANY WAY,
// AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE ALL USE OF THE
// SOFTWARE.  
//
// Except as expressly set forth in the Authorized License,
//
// 1.     This program, including its structure, sequence and organization,
// constitutes the valuable trade secrets of Broadcom, and you shall use all
// reasonable efforts to protect the confidentiality thereof, and to use this
// information only in connection with your use of Broadcom integrated circuit
// products.
//
// 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED
// "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES, REPRESENTATIONS
// OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH
// RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY DISCLAIMS ANY AND ALL
// IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR
// A PARTICULAR PURPOSE, LACK OF VIRUSES, ACCURACY OR COMPLETENESS, QUIET
// ENJOYMENT, QUIET POSSESSION OR CORRESPONDENCE TO DESCRIPTION. YOU ASSUME
// THE ENTIRE RISK ARISING OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
//
// 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL BROADCOM
// OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL, INCIDENTAL, SPECIAL,
// INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER ARISING OUT OF OR IN ANY WAY
// RELATING TO YOUR USE OF OR INABILITY TO USE THE SOFTWARE EVEN IF BROADCOM
// HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN
// EXCESS OF THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR U.S. $1,
// WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING ANY
// FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.
//
// ****************************************************************************
//
//  Filename:         apm_pcm.h
//  Generated by:     RDB Utility
//  Creation Date:    12/4/2009
//  Command Line:     rdb.pl bcm3382_a0.rdb2 -header rdb_output/headers_borked -camelcase -nounroll --addrtest=rdb_output/test_borked.c -R
// ****************************************************************************
//
// IMPORTANT: DO NOT MODIFY, THIS IS AN AUTOGENERATED FILE. 
// Please modify the source .rdb file instead if you need to change this file. 
// Contact Jeff Bauch if you need more information.
//
// ****************************************************************************
#ifndef APM_PCM_H__
#define APM_PCM_H__


enum APM_PCM_PCM_CLOCK_SEL {
  APM_PCM_PCM_CLOCK_SEL_CLK8192=0x0,                 
  APM_PCM_PCM_CLOCK_SEL_CLK4096=0x1,                 
  APM_PCM_PCM_CLOCK_SEL_CLK2048=0x2,                 
  APM_PCM_PCM_CLOCK_SEL_CLK1024=0x3,                 
  APM_PCM_PCM_CLOCK_SEL_CLK512=0x4,                  
  APM_PCM_PCM_CLOCK_SEL_CLK256=0x5,                  
  APM_PCM_PCM_CLOCK_SEL_CLK128=0x6,                  
  APM_PCM_PCM_CLOCK_SEL_RESERVED=0x7,                
};

typedef union {
  struct {
    uint32 Reserved                 :8; 
    uint32 PcmRxPacketSize          :8; 
    uint32 PcmRxEnable              :8; 
    uint32 PcmTxEnable              :8; 
  } Bits;
  uint32 Reg32;
}  ApmPcmChanCtrl;

typedef union {
  struct {
    uint32 Reserved                 :24;
    uint32 NcoSoftInit              :1; 
    uint32 LoadMisc                 :1; 
    uint32 NcoMuxCtrl               :2; 
    uint32 NcoShift                 :4; 
  } Bits;
  uint32 Reg32;
}  ApmPcmPcmClkCtrl2;

typedef union {
  struct {
    uint32 PcmEnable                :1; 
    uint32 PcmSlaveSel              :1; 
    uint32 PcmClockInv              :1; 
    uint32 PcmFsInvert              :1; 
    uint32 PcmFsFreq168             :1; 
    uint32 PcmFsLong                :1; 
    uint32 PcmFsTrig                :1; 
    uint32 PcmDataOff               :1; 
    uint32 PcmData168               :1; 
    uint32 PcmClockSel              :3; 
    uint32 Reserved                 :1; 
    uint32 PcmLsbFirst              :1; 
    uint32 PcmLoopback              :1; 
    uint32 PcmExtclkSel             :1; 
    uint32 Reserved2                :5; 
    uint32 BitsPerFrame             :10;
    uint32 PcmApSel                 :1; 
  } Bits;
  uint32 Reg32;
}  ApmPcmPcmCtrl;

typedef union {
  struct {
    uint32 Reserved                 :29;
    uint32 PcmTdmFrame              :1; 
    uint32 PcmRxOverflow            :1; 
    uint32 PcmTxUnderflow           :1; 
  } Bits;
  uint32 Reg32;
}  ApmPcmPcmIrqMask;

typedef union {
  struct {
    uint32 Reserved                 :29;
    uint32 PcmTdmFrame              :1; 
    uint32 PcmRxOverflow            :1; 
    uint32 PcmTxUnderflow           :1; 
  } Bits;
  uint32 Reg32;
}  ApmPcmPcmIrqPending;

typedef union {
  struct {
    uint32 Ts0                      :4; 
    uint32 Ts1                      :4; 
    uint32 Ts2                      :4; 
    uint32 Ts3                      :4; 
    uint32 Ts4                      :4; 
    uint32 Ts5                      :4; 
    uint32 Ts6                      :4; 
    uint32 Ts7                      :4; 
  } Bits;
  uint32 Reg32;
}  ApmPcmTsAllocTable0;

typedef union {
  struct {
    uint32 Ts8                      :4; 
    uint32 Ts9                      :4; 
    uint32 Ts10                     :4; 
    uint32 Ts11                     :4; 
    uint32 Ts12                     :4; 
    uint32 Ts13                     :4; 
    uint32 Ts14                     :4; 
    uint32 Ts15                     :4; 
  } Bits;
  uint32 Reg32;
}  ApmPcmTsAllocTable1;

typedef union {
  struct {
    uint32 Ts80                     :4; 
    uint32 Ts81                     :4; 
    uint32 Ts82                     :4; 
    uint32 Ts83                     :4; 
    uint32 Ts84                     :4; 
    uint32 Ts85                     :4; 
    uint32 Ts86                     :4; 
    uint32 Ts87                     :4; 
  } Bits;
  uint32 Reg32;
}  ApmPcmTsAllocTable10;

typedef union {
  struct {
    uint32 Ts88                     :4; 
    uint32 Ts89                     :4; 
    uint32 Ts90                     :4; 
    uint32 Ts91                     :4; 
    uint32 Ts92                     :4; 
    uint32 Ts93                     :4; 
    uint32 Ts94                     :4; 
    uint32 Ts95                     :4; 
  } Bits;
  uint32 Reg32;
}  ApmPcmTsAllocTable11;

typedef union {
  struct {
    uint32 Ts96                     :4; 
    uint32 Ts97                     :4; 
    uint32 Ts98                     :4; 
    uint32 Ts99                     :4; 
    uint32 Ts100                    :4; 
    uint32 Ts101                    :4; 
    uint32 Ts102                    :4; 
    uint32 Ts103                    :4; 
  } Bits;
  uint32 Reg32;
}  ApmPcmTsAllocTable12;

typedef union {
  struct {
    uint32 Ts104                    :4; 
    uint32 Ts105                    :4; 
    uint32 Ts106                    :4; 
    uint32 Ts107                    :4; 
    uint32 Ts108                    :4; 
    uint32 Ts109                    :4; 
    uint32 Ts110                    :4; 
    uint32 Ts111                    :4; 
  } Bits;
  uint32 Reg32;
}  ApmPcmTsAllocTable13;

typedef union {
  struct {
    uint32 Ts112                    :4; 
    uint32 Ts113                    :4; 
    uint32 Ts114                    :4; 
    uint32 Ts115                    :4; 
    uint32 Ts116                    :4; 
    uint32 Ts117                    :4; 
    uint32 Ts118                    :4; 
    uint32 Ts119                    :4; 
  } Bits;
  uint32 Reg32;
}  ApmPcmTsAllocTable14;

typedef union {
  struct {
    uint32 Ts120                    :4; 
    uint32 Ts121                    :4; 
    uint32 Ts122                    :4; 
    uint32 Ts123                    :4; 
    uint32 Ts124                    :4; 
    uint32 Ts125                    :4; 
    uint32 Ts126                    :4; 
    uint32 Ts127                    :4; 
  } Bits;
  uint32 Reg32;
}  ApmPcmTsAllocTable15;

typedef union {
  struct {
    uint32 Ts16                     :4; 
    uint32 Ts17                     :4; 
    uint32 Ts18                     :4; 
    uint32 Ts19                     :4; 
    uint32 Ts20                     :4; 
    uint32 Ts21                     :4; 
    uint32 Ts22                     :4; 
    uint32 Ts23                     :4; 
  } Bits;
  uint32 Reg32;
}  ApmPcmTsAllocTable2;

typedef union {
  struct {
    uint32 Ts24                     :4; 
    uint32 Ts25                     :4; 
    uint32 Ts26                     :4; 
    uint32 Ts27                     :4; 
    uint32 Ts28                     :4; 
    uint32 Ts29                     :4; 
    uint32 Ts30                     :4; 
    uint32 Ts31                     :4; 
  } Bits;
  uint32 Reg32;
}  ApmPcmTsAllocTable3;

typedef union {
  struct {
    uint32 Ts32                     :4; 
    uint32 Ts33                     :4; 
    uint32 Ts34                     :4; 
    uint32 Ts35                     :4; 
    uint32 Ts36                     :4; 
    uint32 Ts37                     :4; 
    uint32 Ts38                     :4; 
    uint32 Ts39                     :4; 
  } Bits;
  uint32 Reg32;
}  ApmPcmTsAllocTable4;

typedef union {
  struct {
    uint32 Ts40                     :4; 
    uint32 Ts41                     :4; 
    uint32 Ts42                     :4; 
    uint32 Ts43                     :4; 
    uint32 Ts44                     :4; 
    uint32 Ts45                     :4; 
    uint32 Ts46                     :4; 
    uint32 Ts47                     :4; 
  } Bits;
  uint32 Reg32;
}  ApmPcmTsAllocTable5;

typedef union {
  struct {
    uint32 Ts48                     :4; 
    uint32 Ts49                     :4; 
    uint32 Ts50                     :4; 
    uint32 Ts51                     :4; 
    uint32 Ts52                     :4; 
    uint32 Ts53                     :4; 
    uint32 Ts54                     :4; 
    uint32 Ts55                     :4; 
  } Bits;
  uint32 Reg32;
}  ApmPcmTsAllocTable6;

typedef union {
  struct {
    uint32 Ts56                     :4; 
    uint32 Ts57                     :4; 
    uint32 Ts58                     :4; 
    uint32 Ts59                     :4; 
    uint32 Ts60                     :4; 
    uint32 Ts61                     :4; 
    uint32 Ts62                     :4; 
    uint32 Ts63                     :4; 
  } Bits;
  uint32 Reg32;
}  ApmPcmTsAllocTable7;

typedef union {
  struct {
    uint32 Ts64                     :4; 
    uint32 Ts65                     :4; 
    uint32 Ts66                     :4; 
    uint32 Ts67                     :4; 
    uint32 Ts68                     :4; 
    uint32 Ts69                     :4; 
    uint32 Ts70                     :4; 
    uint32 Ts71                     :4; 
  } Bits;
  uint32 Reg32;
}  ApmPcmTsAllocTable8;

typedef union {
  struct {
    uint32 Ts72                     :4; 
    uint32 Ts73                     :4; 
    uint32 Ts74                     :4; 
    uint32 Ts75                     :4; 
    uint32 Ts76                     :4; 
    uint32 Ts77                     :4; 
    uint32 Ts78                     :4; 
    uint32 Ts79                     :4; 
  } Bits;
  uint32 Reg32;
}  ApmPcmTsAllocTable9;

typedef struct {
  ApmPcmPcmCtrl                       Ctrl;                    
  ApmPcmChanCtrl                      ChannelCtrl;             
  ApmPcmPcmIrqPending                 IntPending;              
  ApmPcmPcmIrqMask                    IntMask;                 
  uint32                              ClockCtrl0;              
  uint32                              ClockCtrl1;              
  ApmPcmPcmClkCtrl2                   ClockCtrl2;              
  uint8                               Pad0[0x24];
  ApmPcmTsAllocTable0                 Table0;                  
  ApmPcmTsAllocTable1                 Table1;                  
  ApmPcmTsAllocTable2                 Table2;                  
  ApmPcmTsAllocTable3                 Table3;                  
  ApmPcmTsAllocTable4                 Table4;                  
  ApmPcmTsAllocTable5                 Table5;                  
  ApmPcmTsAllocTable6                 Table6;                  
  ApmPcmTsAllocTable7                 Table7;                  
  ApmPcmTsAllocTable8                 Table8;                  
  ApmPcmTsAllocTable9                 Table9;                  
  ApmPcmTsAllocTable10                Table10;                 
  ApmPcmTsAllocTable11                Table11;                 
  ApmPcmTsAllocTable12                Table12;                 
  ApmPcmTsAllocTable13                Table13;                 
  ApmPcmTsAllocTable14                Table14;                 
  ApmPcmTsAllocTable15                Table15;                 
}  ApmPcmApmPcmApmPcm;

#endif 



