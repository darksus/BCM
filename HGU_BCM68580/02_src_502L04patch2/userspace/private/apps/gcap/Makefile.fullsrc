#
# In most cases, you only need to modify this first section.
#
EXE  = GCAP
LIBNAME = mocactl

GCAP_FILES = $(shell find . -name "*.c" -type f -printf "%f\n")
OBJS = $(GCAP_FILES:.c=.o)
GCAP_EXES = $(shell find . -name "*[0-9]*.c" -type f -printf "%f ")

LIBS = -l$(LIBNAME) -lpthread

all dynamic install: conditional_build

clean: generic_clean
	rm -f $(INSTALL_DIR)/bin/$(EXE)
	$(foreach x, $(GCAP_EXES), rm -f $(INSTALL_DIR)/bin/$(x:.c=))

#
# Set our CommEngine directory (by splitting the pwd into two words
# at /userspace and taking the first word only).
# Then include the common defines under CommEngine.
#
CURR_DIR := $(shell pwd)
BUILD_DIR:=$(subst /userspace, /userspace,$(CURR_DIR))
BUILD_DIR:=$(word 1, $(BUILD_DIR))

include $(BUILD_DIR)/make.common

ifneq ($(strip $(BUILD_BRCM_CMS)),)
LIBS += -lcms_msg $(CMS_COMMON_LIBS)
ifneq ($(strip $(BUILD_ETHSWCTL)),)
LIBS +=  -lethswctl
endif
endif

ifneq ($(strip $(BUILD_MoCACTL)),)
conditional_build: $(EXE)
	set -e; for dir in ${SUBDIRS} ; do ${MAKE} -C $$dir; done
	install -m 755 $(EXE) $(INSTALL_DIR)/bin
	$(foreach x, $(GCAP_EXES), $(shell ln -sf $(EXE) $(INSTALL_DIR)/bin/$(x:.c=)))
else
conditional_build:
	@echo "skipping GCAP (not configured)"
endif

#
# Private apps and libs are allowed to include header files from the
# private and public directories.
#
# WARNING: Do not modify this section unless you understand the
# license implications of what you are doing.
#
ALLOWED_INCLUDE_PATHS := -I.\
                         -I$(BUILD_DIR)/userspace/public/include  \
                         -I$(BUILD_DIR)/userspace/public/include/$(OALDIR) \
                         -I$(BUILD_DIR)/userspace/private/include  \
                         -I$(BUILD_DIR)/userspace/private/include/$(OALDIR) \
                         -I$(BUILD_DIR)/userspace/private/libs/mocactl/linux


#
# Private apps and libs are allowed to link with libraries from the
# private and public directories.
#
# WARNING: Do not modify this section unless you understand the
# license implications of what you are doing.
#
ALLOWED_LIB_DIRS := /lib:/lib/private:/lib/public


#
# Implicit rule will make the .c into a .o
# Implicit rule is $(CC) -c $(CPPFLAGS) $(CFLAGS)
# See Section 10.2 of Gnu Make manual
# 
$(EXE): $(OBJS)
	$(CC) -o $@ $(OBJS) -Wl,-rpath,$(CMS_LIB_RPATH) $(CMS_LIB_PATH) $(LIBS)


#
# Include the rule for making dependency files.
# The '-' in front of the second include suppresses
# error messages when make cannot find the .d files.
# It will just regenerate them.
# See Section 4.14 of Gnu Make.
#

include $(BUILD_DIR)/make.deprules

-include $(OBJS:.o=.d)
