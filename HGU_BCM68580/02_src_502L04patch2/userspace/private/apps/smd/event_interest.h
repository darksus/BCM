/***********************************************************************
 *
 *  Copyright (c) 2007  Broadcom Corporation
 *  All Rights Reserved
 *
<:label-BRCM:2012:proprietary:standard

 This program is the proprietary software of Broadcom and/or its
 licensors, and may only be used, duplicated, modified or distributed pursuant
 to the terms and conditions of a separate, written license agreement executed
 between you and Broadcom (an "Authorized License").  Except as set forth in
 an Authorized License, Broadcom grants no license (express or implied), right
 to use, or waiver of any kind with respect to the Software, and Broadcom
 expressly reserves all rights in and to the Software and all intellectual
 property rights therein.  IF YOU HAVE NO AUTHORIZED LICENSE, THEN YOU HAVE
 NO RIGHT TO USE THIS SOFTWARE IN ANY WAY, AND SHOULD IMMEDIATELY NOTIFY
 BROADCOM AND DISCONTINUE ALL USE OF THE SOFTWARE.

 Except as expressly set forth in the Authorized License,

 1. This program, including its structure, sequence and organization,
    constitutes the valuable trade secrets of Broadcom, and you shall use
    all reasonable efforts to protect the confidentiality thereof, and to
    use this information only in connection with your use of Broadcom
    integrated circuit products.

 2. TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS"
    AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES, REPRESENTATIONS OR
    WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH
    RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY DISCLAIMS ANY AND
    ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY, NONINFRINGEMENT,
    FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES, ACCURACY OR
    COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR CORRESPONDENCE
    TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING OUT OF USE OR
    PERFORMANCE OF THE SOFTWARE.

 3. TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL BROADCOM OR
    ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL, INCIDENTAL, SPECIAL,
    INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER ARISING OUT OF OR IN ANY
    WAY RELATING TO YOUR USE OF OR INABILITY TO USE THE SOFTWARE EVEN
    IF BROADCOM HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES;
    OR (ii) ANY AMOUNT IN EXCESS OF THE AMOUNT ACTUALLY PAID FOR THE
    SOFTWARE ITSELF OR U.S. $1, WHICHEVER IS GREATER. THESE LIMITATIONS
    SHALL APPLY NOTWITHSTANDING ANY FAILURE OF ESSENTIAL PURPOSE OF ANY
    LIMITED REMEDY.
:>
 *
 ************************************************************************/

#ifndef __EVENT_INTEREST_H__
#define __EVENT_INTEREST_H__

#include "cms.h"
#include "cms_eid.h"
#include "cms_util.h"
#include "cms_msg.h"


/*!\file event_interest.h
 * \brief Header file for event interest manipulation functions.
 * 
 * In CMS, applications can register their interest for events.
 * Events are generated by various applications that monitor for that
 * event in their sub-system or in the kernel.  When an event occurs,
 * the application sends an event message to smd, which then distributes
 * a copy of that event message to any application which has registered
 * an interest for that event.  So from the receiving application's point
 * of view, an "event" as just an "event message".
 * 
 * This sub-system keeps track of event interests in a 2 dimensional
 * lattice structure.  On the left vertical side of the lattice, you
 * have EvtInterest linked together on a doubly linked list.  Each EvtInterest
 * represents one event message.
 * 
 * Each EvtInterest has a doubly linked list of all applications that are
 * interested in that particular event (i.e. event message).  This doubly
 * linked list extends from the left to right horizontally accross the lattice.
 * 
 * Various API functions are defined to add/delete EvtInterest,
 * add/delete EvtInterestInfo from a EvtInterest, etc.
 *
 */


/** Structure to track a single entity that is interested in a particular event.
 *
 */
typedef struct event_interest_info
{
   DlistNode          dlist;     /**< generic doubly linked list handle */
   CmsEntityId        eid;       /**< eid of interested app. */
   char *             matchData; /**< extra matching data beyond just the msgType. */
} EvtInterestInfo;


/** Structure to keep track of all entities that are interested in a particular event.
 */
typedef struct event_interest
{
   DlistNode      dlist;       /**< generic doubly linked list handle */
   CmsMsgType     type;        /**< Event of interest, which is just a notification msg type */
   DlistNode      evtInfoHead; /**< Doubly linked list of EvtInterestInfo's for this event. */
} EvtInterest;


extern void interest_init(void);
extern void interest_cleanup(void);

/** Record that the specified eid is interested in the specified msgType.
 * 
 * @param msgType (IN) the msg type that the app is interested in.
 * @param interestedEid (IN) the eid of the app.
 * @param matchData (IN) Optional additional matching data that the 
 *                       caller wants to match against (in addition
 *                       to the msgType).
 * 
 * @return CmsRet enum.
 */ 
extern CmsRet interest_register(CmsMsgType msgType, CmsEntityId interestedEid, const char *matchData);


/** Clear the interest in the specified msgType for the specified eid.
 * 
 * @param msgType (IN) the msg type that the app is no longer interested in.
 * @param interestedEid (IN) the eid of the app.
 * 
 * @return CmsRet enum.
 */ 
extern CmsRet interest_unregister(CmsMsgType msgType, CmsEntityId interestedEid);


/** Unregister this eid from all event interest registrations.
 * This is usually done if the app is a multiple instance app and it
 * has exited.
 * 
 * @param interestedEid (IN) the eid of the app.
 */
void interest_unregisterAll(CmsEntityId interestedEid);
 

extern EvtInterest *interest_findType(CmsMsgType msgType);
extern EvtInterestInfo *interest_findInfo(EvtInterest *evtInterest, CmsEntityId interestedEid);

#endif /* __EVENT_INTEREST_H__ */
