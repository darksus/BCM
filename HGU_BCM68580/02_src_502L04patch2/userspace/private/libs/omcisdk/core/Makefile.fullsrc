#
# In most cases, you only need to modify this first section.
#

SUBDIRS = data-model db handler rutapi schema
DIRLIST = $(SUBDIRS) inc

LIB = libomci_core.so

all install: conditional_build
.PHONY: $(LIB)

clean: generic_subdir_clean generic_clean
	rm -f $(INSTALL_DIR)/lib/private/$(LIB)

binaryonly_dist_cleanx:
	if [ -a $(LIB) ]; then cp $(LIB) $(LIB)_$(PROFILE).save; fi;
	rm -f $(INSTALL_DIR)/lib/private/$(LIB)
	rm -f Makefile.fullsrc
	rm -f *.o *.d *.d.* core.* *.a output.txt $(LIB)
	for dir in $(DIRLIST); do rm -fr $$dir; done

#
# Set our CommEngine directory (by splitting the pwd into two words
# at /userspace and taking the first word only).
# Then include the common defines under CommEngine.
# You do not need to modify this part.
#
CURR_DIR := $(shell pwd)
BUILD_DIR:=$(subst /userspace, /userspace,$(CURR_DIR))
BUILD_DIR:=$(word 1, $(BUILD_DIR))

include $(BUILD_DIR)/make.common

ifneq ($(strip $(BUILD_OMCI)),)
conditional_build: generic_private_lib_install

else
conditional_build: 
	@echo "omcisdk core skipped (BUILD_OMCI not configured)"

endif


#
# Private apps and libs are allowed to include header files from the
# private and public directories
#
# WARNING: Do not modify this section unless you understand the
# license implications of what you are doing.
#

# treat all warnings as errors
CUSTOM_CFLAGS += -Werror -Wfatal-errors

#
# Implicit rule will make the .c into a .o
# Implicit rule is $(CC) -c $(CPPFLAGS) $(CFLAGS)
# See Section 10.2 of Gnu Make manual
# 
$(LIB):
	set -e; for dir in $(SUBDIRS); do $(MAKE) -C $$dir all; done
	$(CC) -shared $(BCM_LD_FLAGS) -Wl,--whole-archive,-soname,$@ -o $@ \
		db/omcidb.a schema/schema.a rutapi/rutapi.a handler/omcihandler.a \
		-Wl,--no-whole-archive -ldl -lpthread

#
# Include the rule for making dependency files.
# The '-' in front of the second include suppresses
# error messages when make cannot find the .d files.
# It will just regenerate them.
# See Section 4.14 of Gnu Make.
#

include $(BUILD_DIR)/make.deprules

-include $(OBJS:.o=.d)
