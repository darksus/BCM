#
# In most cases, you only need to modify this first section.
#
LIB = libomci.so

OBJS = omci_pm_api.o omci_pm_llist.o omci_th_llist.o \
       omci_alarm_llist.o omci_arc_llist.o omci_pm_poll.o \
       omci_pm_mcast.o omci_pm_alarm.o omci_th_check.o \
       omci_pm_sync.o omci_pm_util.o omci_pm_test.o omci_util.o

all install: generic_private_lib_install

clean: generic_clean
	rm -f $(INSTALL_DIR)/lib/private/$(LIB)

binaryonly_dist_cleanx:
	if [ -a $(LIB) ]; then cp $(LIB) $(LIB)_$(PROFILE).save; fi;
	rm -f $(INSTALL_DIR)/lib/private/$(LIB)
	rm -f Makefile.fullsrc
	rm -f *.o *.d *.d.* core.* *.a output.txt $(LIB)
	rm -rf *.c *.h linux


#
# Set our CommEngine directory (by splitting the pwd into two words
# at /userspace and taking the first word only).
# Then include the common defines under CommEngine.
# You do not need to modify this part.
#
CURR_DIR := $(shell pwd)
BUILD_DIR:=$(subst /userspace, /userspace,$(CURR_DIR))
BUILD_DIR:=$(word 1, $(BUILD_DIR))

include $(BUILD_DIR)/make.common

# The standalone OMCI needs flags from CMS_COMPILE_FLAGS
ifeq ($(strip $(BUILD_BRCM_CMS)),)
CFLAGS += $(CMS_COMPILE_FLAGS)
endif

#
# Private apps and libs are allowed to include header files from the
# private and public directories
#
# WARNING: Do not modify this section unless you understand the
# license implications of what you are doing.
#
ALLOWED_INCLUDE_PATHS := -I.\
                         -I$(BUILD_DIR)/userspace/public/include  \
                         -I$(BUILD_DIR)/userspace/public/include/$(OALDIR) \
                         -I$(BUILD_DIR)/userspace/private/include  \
                         -I$(BUILD_DIR)/userspace/private/include/$(OALDIR) \
                         -I$(BUILD_DIR)/userspace/private/libs/omcisdk/core/inc \
                         -I$(BUILD_DIR)/userspace/private/libs/omcisdk/core/handler \
                         -I$(INC_BRCMDRIVER_PUB_PATH)/$(BRCM_BOARD) \
                         -I$(INC_BRCMDRIVER_PRIV_PATH)/$(BRCM_BOARD) \
                         -I$(INC_BRCMSHARED_PUB_PATH)/$(BRCM_BOARD) \
                         -I$(KERNEL_LINKS_DIR)

ifneq ($(strip $(BRCM_DRIVER_SWITCHSDK)),)
    ALLOWED_INCLUDE_PATHS += -I$(INC_SWITCHSDK_PRIV_PATH)
endif

# treat all warnings as errors
CUSTOM_CFLAGS += -Werror -Wfatal-errors

ifneq ($(strip $(BUILD_BRCM_FTTDP)),)
CFLAGS += "-DBRCM_FTTDP"
endif

#
# Implicit rule will make the .c into a .o
# Implicit rule is $(CC) -c $(CPPFLAGS) $(CFLAGS)
# See Section 10.2 of Gnu Make manual
#
$(LIB): $(OBJS)
	$(CC) -shared $(BCM_LD_FLAGS) -Wl,--whole-archive,-soname,$@ -o $@ $(OBJS) -Wl,--no-whole-archive


#
# Include the rule for making dependency files.
# The '-' in front of the second include suppresses
# error messages when make cannot find the .d files.
# It will just regenerate them.
# See Section 4.14 of Gnu Make.
#

include $(BUILD_DIR)/make.deprules

-include $(OBJS:.o=.d)
